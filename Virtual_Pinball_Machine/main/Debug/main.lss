
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000189e  00001932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000189e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080013e  0080013e  00001970  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d0c  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f7  00000000  00000000  00009a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002530  00000000  00000000  0000bf93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a7c  00000000  00000000  0000e4c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bf4  00000000  00000000  0000ef40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033f4  00000000  00000000  00011b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00014f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      28:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_10>
      2c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_11>
      30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      5c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_23>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000000ac <USB_DeviceDescriptorIAD>:
      ac:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      bc:	03 01                                               ..

000000be <STRING_MANUFACTURER>:
      be:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000ca <STRING_PRODUCT>:
      ca:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000db <STRING_LANGUAGE>:
      db:	04 03 09 04                                         ....

000000df <_asciimap>:
	...
      e7:	2a 2b 28 00 00 00 00 00 00 00 00 00 00 00 00 00     *+(.............
	...
      ff:	2c 9e b4 a0 a1 a2 a4 34 a6 a7 a5 ae 36 2d 37 38     ,......4....6-78
     10f:	27 1e 1f 20 21 22 23 24 25 26 b3 33 b6 2e b7 b8     '.. !"#$%&.3....
     11f:	9f 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 90 91 92     ................
     12f:	93 94 95 96 97 98 99 9a 9b 9c 9d 2f 31 30 a3 ad     .........../10..
     13f:	35 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12     5...............
     14f:	13 14 15 16 17 18 19 1a 1b 1c 1d af b1 b0 b5 00     ................

0000015f <_ZL20_hidReportDescriptor>:
     15f:	05 01 09 06 a1 01 85 02 05 07 19 e0 29 e7 15 00     ............)...
     16f:	25 01 75 01 95 08 81 02 95 01 75 08 81 03 95 06     %.u.......u.....
     17f:	75 08 15 00 25 73 05 07 19 00 29 73 81 00 c0        u...%s....)s...

0000018e <_cdcInterface>:
     18e:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
     19e:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1ae:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1be:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d0 <__ctors_start>:
     1d0:	fe 08       	sbc	r15, r14
     1d2:	07 0a       	sbc	r0, r23

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ee e9       	ldi	r30, 0x9E	; 158
     1e8:	f8 e1       	ldi	r31, 0x18	; 24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 33       	cpi	r26, 0x3E	; 62
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	ae e3       	ldi	r26, 0x3E	; 62
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 3e       	cpi	r26, 0xE1	; 225
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>

00000206 <__do_global_ctors>:
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	ca ee       	ldi	r28, 0xEA	; 234
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	04 c0       	rjmp	.+8      	; 0x216 <__do_global_ctors+0x10>
     20e:	21 97       	sbiw	r28, 0x01	; 1
     210:	fe 01       	movw	r30, r28
     212:	0e 94 47 0c 	call	0x188e	; 0x188e <__tablejump2__>
     216:	c8 3e       	cpi	r28, 0xE8	; 232
     218:	d1 07       	cpc	r29, r17
     21a:	c9 f7       	brne	.-14     	; 0x20e <__do_global_ctors+0x8>
     21c:	0e 94 81 02 	call	0x502	; 0x502 <main>
     220:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <_exit>

00000224 <__bad_interrupt>:
     224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <_Z11read_buttoniPbmPm>:
		{
			PORTD |= (1<<L_SOLENOID);	//Set output PIND7 to 1 to trigger relay
		}
		else
		{
			PORTD &= ~(1<<L_SOLENOID);	//Set output PIND7 to 0 to turn off relay
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	fb 01       	movw	r30, r22
     236:	d8 01       	movw	r26, r16
     238:	63 b1       	in	r22, 0x03	; 3
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	08 2e       	mov	r0, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <_Z11read_buttoniPbmPm+0x1c>
     240:	75 95       	asr	r23
     242:	67 95       	ror	r22
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <_Z11read_buttoniPbmPm+0x18>
     248:	60 fd       	sbrc	r22, 0
     24a:	30 c0       	rjmp	.+96     	; 0x2ac <_Z11read_buttoniPbmPm+0x84>
     24c:	cd 90       	ld	r12, X+
     24e:	dd 90       	ld	r13, X+
     250:	ed 90       	ld	r14, X+
     252:	fc 90       	ld	r15, X
     254:	13 97       	sbiw	r26, 0x03	; 3
     256:	c1 14       	cp	r12, r1
     258:	d1 04       	cpc	r13, r1
     25a:	e1 04       	cpc	r14, r1
     25c:	f1 04       	cpc	r15, r1
     25e:	49 f4       	brne	.+18     	; 0x272 <_Z11read_buttoniPbmPm+0x4a>
     260:	90 81       	ld	r25, Z
     262:	91 11       	cpse	r25, r1
     264:	06 c0       	rjmp	.+12     	; 0x272 <_Z11read_buttoniPbmPm+0x4a>
     266:	2d 93       	st	X+, r18
     268:	3d 93       	st	X+, r19
     26a:	4d 93       	st	X+, r20
     26c:	5c 93       	st	X, r21
     26e:	13 97       	sbiw	r26, 0x03	; 3
     270:	3b c0       	rjmp	.+118    	; 0x2e8 <_Z11read_buttoniPbmPm+0xc0>
     272:	ba 01       	movw	r22, r20
     274:	a9 01       	movw	r20, r18
     276:	4c 19       	sub	r20, r12
     278:	5d 09       	sbc	r21, r13
     27a:	6e 09       	sbc	r22, r14
     27c:	7f 09       	sbc	r23, r15
     27e:	42 33       	cpi	r20, 0x32	; 50
     280:	51 05       	cpc	r21, r1
     282:	61 05       	cpc	r22, r1
     284:	71 05       	cpc	r23, r1
     286:	80 f1       	brcs	.+96     	; 0x2e8 <_Z11read_buttoniPbmPm+0xc0>
     288:	23 b1       	in	r18, 0x03	; 3
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	a9 01       	movw	r20, r18
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z11read_buttoniPbmPm+0x6c>
     290:	55 95       	asr	r21
     292:	47 95       	ror	r20
     294:	8a 95       	dec	r24
     296:	e2 f7       	brpl	.-8      	; 0x290 <_Z11read_buttoniPbmPm+0x68>
     298:	40 fd       	sbrc	r20, 0
     29a:	20 c0       	rjmp	.+64     	; 0x2dc <_Z11read_buttoniPbmPm+0xb4>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 83       	st	Z, r24
     2a0:	1d 92       	st	X+, r1
     2a2:	1d 92       	st	X+, r1
     2a4:	1d 92       	st	X+, r1
     2a6:	1c 92       	st	X, r1
     2a8:	13 97       	sbiw	r26, 0x03	; 3
     2aa:	1e c0       	rjmp	.+60     	; 0x2e8 <_Z11read_buttoniPbmPm+0xc0>
     2ac:	80 81       	ld	r24, Z
     2ae:	88 23       	and	r24, r24
     2b0:	d9 f0       	breq	.+54     	; 0x2e8 <_Z11read_buttoniPbmPm+0xc0>
     2b2:	cd 90       	ld	r12, X+
     2b4:	dd 90       	ld	r13, X+
     2b6:	ed 90       	ld	r14, X+
     2b8:	fc 90       	ld	r15, X
     2ba:	13 97       	sbiw	r26, 0x03	; 3
     2bc:	c1 14       	cp	r12, r1
     2be:	d1 04       	cpc	r13, r1
     2c0:	e1 04       	cpc	r14, r1
     2c2:	f1 04       	cpc	r15, r1
     2c4:	81 f2       	breq	.-96     	; 0x266 <_Z11read_buttoniPbmPm+0x3e>
     2c6:	ba 01       	movw	r22, r20
     2c8:	a9 01       	movw	r20, r18
     2ca:	4c 19       	sub	r20, r12
     2cc:	5d 09       	sbc	r21, r13
     2ce:	6e 09       	sbc	r22, r14
     2d0:	7f 09       	sbc	r23, r15
     2d2:	42 33       	cpi	r20, 0x32	; 50
     2d4:	51 05       	cpc	r21, r1
     2d6:	61 05       	cpc	r22, r1
     2d8:	71 05       	cpc	r23, r1
     2da:	30 f0       	brcs	.+12     	; 0x2e8 <_Z11read_buttoniPbmPm+0xc0>
     2dc:	1d 92       	st	X+, r1
     2de:	1d 92       	st	X+, r1
     2e0:	1d 92       	st	X+, r1
     2e2:	1c 92       	st	X, r1
     2e4:	13 97       	sbiw	r26, 0x03	; 3
     2e6:	10 82       	st	Z, r1
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <setup>:
  * @param None
  * @retval None
  */
void setup()
{
	Keyboard.begin();		//Initialize the library.
     2f6:	87 e5       	ldi	r24, 0x57	; 87
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN9Keyboard_5beginEv>
	delay(1000);			//1 sec delay for Keyboard init
     2fe:	68 ee       	ldi	r22, 0xE8	; 232
     300:	73 e0       	ldi	r23, 0x03	; 3
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 48 07 	call	0xe90	; 0xe90 <delay>
	
	DDRB &= ~(1<<PINB4);	//Set PINB4 to Input
     30a:	24 98       	cbi	0x04, 4	; 4
	DDRB &= ~(1<<PINB5);	//Set PINB5 to Input
     30c:	25 98       	cbi	0x04, 5	; 4
	DDRB &= ~(1<<PINB6);	//Set PINB6 to Input
     30e:	26 98       	cbi	0x04, 6	; 4
	DDRB &= ~(1<<PINB7);	//Set PINB7 to Input
     310:	27 98       	cbi	0x04, 7	; 4
	
	PORTB |= (1<<PINB4);	//Enable internal pull up resistors for PINB4
     312:	2c 9a       	sbi	0x05, 4	; 5
	PORTB |= (1<<PINB5);	//Enable internal pull up resistors for PINB5
     314:	2d 9a       	sbi	0x05, 5	; 5
	PORTB |= (1<<PINB6);	//Enable internal pull up resistors for PINB6
     316:	2e 9a       	sbi	0x05, 6	; 5
	PORTB |= (1<<PINB7);	//Enable internal pull up resistors for PINB7
     318:	2f 9a       	sbi	0x05, 7	; 5
	
	DDRD |= (1<<PIND4);		//Set PIND4 to output
     31a:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1<<PIND7);		//Set PIND7 to output
     31c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<PIND4);	//Set PIND4 output to 0 (Not needed but good practice)
     31e:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1<<PIND7);	//Set PIND7 output to 0
     320:	5f 98       	cbi	0x0b, 7	; 11
     322:	08 95       	ret

00000324 <loop>:
  * @brief Main loop for AVR ("loop()" must be used instead of "main()" because Arduino.h library requires it)
  * @param None
  * @retval None
  */
void loop()
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	6b 97       	sbiw	r28, 0x1b	; 27
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
	unsigned long current_time;
	unsigned long R_previous_time = 0;
     338:	1d 86       	std	Y+13, r1	; 0x0d
     33a:	1e 86       	std	Y+14, r1	; 0x0e
     33c:	1f 86       	std	Y+15, r1	; 0x0f
     33e:	18 8a       	std	Y+16, r1	; 0x10
	unsigned long L_previous_time = 0;
     340:	19 86       	std	Y+9, r1	; 0x09
     342:	1a 86       	std	Y+10, r1	; 0x0a
     344:	1b 86       	std	Y+11, r1	; 0x0b
     346:	1c 86       	std	Y+12, r1	; 0x0c
	unsigned long B_previous_time = 0;
     348:	1d 82       	std	Y+5, r1	; 0x05
     34a:	1e 82       	std	Y+6, r1	; 0x06
     34c:	1f 82       	std	Y+7, r1	; 0x07
     34e:	18 86       	std	Y+8, r1	; 0x08
	unsigned long E_previous_time = 0;
     350:	19 82       	std	Y+1, r1	; 0x01
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	1b 82       	std	Y+3, r1	; 0x03
     356:	1c 82       	std	Y+4, r1	; 0x04
	unsigned long RS_previous_time = 0;
	unsigned long SOL_Safe_time = 0;
	unsigned long KEY_Safe_time = 0;
	
	//Button bools init to false
	bool R_BTN_PRESS = false;
     358:	1c 8a       	std	Y+20, r1	; 0x14
	bool L_BTN_PRESS = false;
     35a:	1b 8a       	std	Y+19, r1	; 0x13
	bool B_BTN_PRESS = false;
     35c:	1a 8a       	std	Y+18, r1	; 0x12
	bool E_BTN_PRESS = false;
     35e:	19 8a       	std	Y+17, r1	; 0x11
	
	//Button state bools init to false (These vars as used to turn off solenoids if buttons are held. This prevents the solenoids from burning out)
	bool R_BUTTONSTATE = false;
	bool L_BUTTONSTATE = false;
	bool B_BUTTONSTATE = false;
	bool E_BUTTONSTATE = false;
     360:	1b 8e       	std	Y+27, r1	; 0x1b
	bool E_BTN_PRESS = false;
	
	//Button state bools init to false (These vars as used to turn off solenoids if buttons are held. This prevents the solenoids from burning out)
	bool R_BUTTONSTATE = false;
	bool L_BUTTONSTATE = false;
	bool B_BUTTONSTATE = false;
     362:	1a 8e       	std	Y+26, r1	; 0x1a
	bool B_BTN_PRESS = false;
	bool E_BTN_PRESS = false;
	
	//Button state bools init to false (These vars as used to turn off solenoids if buttons are held. This prevents the solenoids from burning out)
	bool R_BUTTONSTATE = false;
	bool L_BUTTONSTATE = false;
     364:	19 8e       	std	Y+25, r1	; 0x19
	bool L_BTN_PRESS = false;
	bool B_BTN_PRESS = false;
	bool E_BTN_PRESS = false;
	
	//Button state bools init to false (These vars as used to turn off solenoids if buttons are held. This prevents the solenoids from burning out)
	bool R_BUTTONSTATE = false;
     366:	31 2c       	mov	r3, r1
	unsigned long L_previous_time = 0;
	unsigned long B_previous_time = 0;
	unsigned long E_previous_time = 0;
	unsigned long LS_previous_time = 0;
	unsigned long RS_previous_time = 0;
	unsigned long SOL_Safe_time = 0;
     368:	1d 8a       	std	Y+21, r1	; 0x15
     36a:	1e 8a       	std	Y+22, r1	; 0x16
     36c:	1f 8a       	std	Y+23, r1	; 0x17
     36e:	18 8e       	std	Y+24, r1	; 0x18
	unsigned long R_previous_time = 0;
	unsigned long L_previous_time = 0;
	unsigned long B_previous_time = 0;
	unsigned long E_previous_time = 0;
	unsigned long LS_previous_time = 0;
	unsigned long RS_previous_time = 0;
     370:	41 2c       	mov	r4, r1
     372:	51 2c       	mov	r5, r1
     374:	32 01       	movw	r6, r4
	unsigned long current_time;
	unsigned long R_previous_time = 0;
	unsigned long L_previous_time = 0;
	unsigned long B_previous_time = 0;
	unsigned long E_previous_time = 0;
	unsigned long LS_previous_time = 0;
     376:	81 2c       	mov	r8, r1
     378:	91 2c       	mov	r9, r1
     37a:	54 01       	movw	r10, r8
	bool B_BUTTONSTATE = false;
	bool E_BUTTONSTATE = false;

	while(1) //Infinite loop (Acts as AVRs OS after init)
	{
		current_time = millis();
     37c:	0e 94 17 07 	call	0xe2e	; 0xe2e <millis>
     380:	6b 01       	movw	r12, r22
     382:	7c 01       	movw	r14, r24
		
		
		read_button(PINB4, &R_BTN_PRESS, current_time, &R_previous_time);
     384:	8e 01       	movw	r16, r28
     386:	03 5f       	subi	r16, 0xF3	; 243
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	be 01       	movw	r22, r28
     390:	6c 5e       	subi	r22, 0xEC	; 236
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 14 01 	call	0x228	; 0x228 <_Z11read_buttoniPbmPm>
		read_button(PINB5, &L_BTN_PRESS, current_time, &L_previous_time);
     39c:	04 50       	subi	r16, 0x04	; 4
     39e:	11 09       	sbc	r17, r1
     3a0:	a7 01       	movw	r20, r14
     3a2:	96 01       	movw	r18, r12
     3a4:	be 01       	movw	r22, r28
     3a6:	6d 5e       	subi	r22, 0xED	; 237
     3a8:	7f 4f       	sbci	r23, 0xFF	; 255
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 14 01 	call	0x228	; 0x228 <_Z11read_buttoniPbmPm>
		read_button(PINB6, &B_BTN_PRESS, current_time, &B_previous_time);
     3b2:	04 50       	subi	r16, 0x04	; 4
     3b4:	11 09       	sbc	r17, r1
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	be 01       	movw	r22, r28
     3bc:	6e 5e       	subi	r22, 0xEE	; 238
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	86 e0       	ldi	r24, 0x06	; 6
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 14 01 	call	0x228	; 0x228 <_Z11read_buttoniPbmPm>
		read_button(PINB7, &E_BTN_PRESS, current_time, &E_previous_time);
     3c8:	04 50       	subi	r16, 0x04	; 4
     3ca:	11 09       	sbc	r17, r1
     3cc:	a7 01       	movw	r20, r14
     3ce:	96 01       	movw	r18, r12
     3d0:	be 01       	movw	r22, r28
     3d2:	6f 5e       	subi	r22, 0xEF	; 239
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	87 e0       	ldi	r24, 0x07	; 7
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 14 01 	call	0x228	; 0x228 <_Z11read_buttoniPbmPm>
		
		
		//read_buttons(&R_BTN_PRESS, &L_BTN_PRESS, &B_BTN_PRESS);	//Refresh button states each loop
		
		if (R_BTN_PRESS != R_BUTTONSTATE)			//Checks to see if right button state has changed (Pressed or released)
     3de:	2c 88       	ldd	r2, Y+20	; 0x14
     3e0:	32 14       	cp	r3, r2
     3e2:	81 f0       	breq	.+32     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			R_BUTTONSTATE = R_BTN_PRESS;			//Update right button state
			if (R_BTN_PRESS == true)				//If right button is currently being pressed
     3e4:	22 20       	and	r2, r2
     3e6:	49 f0       	breq	.+18     	; 0x3fa <loop+0xd6>
{
	if (SOLENOID == R_SOLENOID)			//If right solenoid state needs to be changed
	{
		if (STATE == ON)				//If solenoid needs to be powered on
		{
			PORTD |= (1<<R_SOLENOID);	//Set output PIND4 to 1 to trigger relay (Power on solenoid 12V)
     3e8:	5c 9a       	sbi	0x0b, 4	; 11
			if (R_BTN_PRESS == true)				//If right button is currently being pressed
			{
				KEY_Safe_time = current_time;
				RS_previous_time = current_time;
				solenoid_ctrl(R_SOLENOID, ON);		//Turn on right solenoid
				Keyboard.press(KEY_RIGHT_ARROW);	//Send right arrow key press to PC (continuously being sent until Keyboard.release is used
     3ea:	67 ed       	ldi	r22, 0xD7	; 215
     3ec:	87 e5       	ldi	r24, 0x57	; 87
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN9Keyboard_5pressEh>
		{
			R_BUTTONSTATE = R_BTN_PRESS;			//Update right button state
			if (R_BTN_PRESS == true)				//If right button is currently being pressed
			{
				KEY_Safe_time = current_time;
				RS_previous_time = current_time;
     3f4:	26 01       	movw	r4, r12
     3f6:	37 01       	movw	r6, r14
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				solenoid_ctrl(R_SOLENOID, ON);		//Turn on right solenoid
				Keyboard.press(KEY_RIGHT_ARROW);	//Send right arrow key press to PC (continuously being sent until Keyboard.release is used
			}
			else									//Right button is released
			{
				Keyboard.release(KEY_RIGHT_ARROW);	//Stop sending right arrow key press to PC
     3fa:	67 ed       	ldi	r22, 0xD7	; 215
     3fc:	87 e5       	ldi	r24, 0x57	; 87
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
			}
		}
		if (current_time - RS_previous_time >= 50)										//Right button is being held or not pressed
     404:	d7 01       	movw	r26, r14
     406:	c6 01       	movw	r24, r12
     408:	84 19       	sub	r24, r4
     40a:	95 09       	sbc	r25, r5
     40c:	a6 09       	sbc	r26, r6
     40e:	b7 09       	sbc	r27, r7
     410:	c2 97       	sbiw	r24, 0x32	; 50
     412:	a1 05       	cpc	r26, r1
     414:	b1 05       	cpc	r27, r1
     416:	08 f0       	brcs	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			PORTD |= (1<<R_SOLENOID);	//Set output PIND4 to 1 to trigger relay (Power on solenoid 12V)
		}
		else							//I used "else" instead of "if else (STATE == OFF)" to prevent mistakes that keep the solenoid power on too long. Solenoid can burn out if left on too long (8s or more)
		{
			PORTD &= ~(1<<R_SOLENOID);	//Set output PIND4 to 0 to turn off relay (Power off solenoid 12V)
     418:	5c 98       	cbi	0x0b, 4	; 11
		{
			solenoid_ctrl(R_SOLENOID, OFF);			//Turn off right solenoid
			//RS_previous_time = current_time;
		}
		
		if (L_BTN_PRESS != L_BUTTONSTATE)			//Checks to see if left button state has changed (Pressed or released)
     41a:	0b 89       	ldd	r16, Y+19	; 0x13
     41c:	29 8d       	ldd	r18, Y+25	; 0x19
     41e:	20 17       	cp	r18, r16
     420:	81 f0       	breq	.+32     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		{
			L_BUTTONSTATE = L_BTN_PRESS;			//Update left button state
			if (L_BTN_PRESS == true)				//If left button is currently being pressed
     422:	00 23       	and	r16, r16
     424:	49 f0       	breq	.+18     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	}
	else if (SOLENOID == L_SOLENOID)	//If left solenoid state needs to be changed
	{
		if (STATE == ON)				//If solenoid needs to be powered on
		{
			PORTD |= (1<<L_SOLENOID);	//Set output PIND7 to 1 to trigger relay
     426:	5f 9a       	sbi	0x0b, 7	; 11
			if (L_BTN_PRESS == true)				//If left button is currently being pressed
			{
				KEY_Safe_time = current_time;
				LS_previous_time = current_time;
				solenoid_ctrl(L_SOLENOID, ON);		//Turn on left solenoid
				Keyboard.press(KEY_LEFT_ARROW);		//Send left arrow key press to PC
     428:	68 ed       	ldi	r22, 0xD8	; 216
     42a:	87 e5       	ldi	r24, 0x57	; 87
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN9Keyboard_5pressEh>
		{
			L_BUTTONSTATE = L_BTN_PRESS;			//Update left button state
			if (L_BTN_PRESS == true)				//If left button is currently being pressed
			{
				KEY_Safe_time = current_time;
				LS_previous_time = current_time;
     432:	46 01       	movw	r8, r12
     434:	57 01       	movw	r10, r14
     436:	05 c0       	rjmp	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				solenoid_ctrl(L_SOLENOID, ON);		//Turn on left solenoid
				Keyboard.press(KEY_LEFT_ARROW);		//Send left arrow key press to PC
			}
			else									//Left button is released
			{
				Keyboard.release(KEY_LEFT_ARROW);	//Stop sending left arrow key press to PC
     438:	68 ed       	ldi	r22, 0xD8	; 216
     43a:	87 e5       	ldi	r24, 0x57	; 87
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
			}
		}
		if (current_time - LS_previous_time >= 50)		//Left button is being held or not pressed
     442:	d7 01       	movw	r26, r14
     444:	c6 01       	movw	r24, r12
     446:	88 19       	sub	r24, r8
     448:	99 09       	sbc	r25, r9
     44a:	aa 09       	sbc	r26, r10
     44c:	bb 09       	sbc	r27, r11
     44e:	c2 97       	sbiw	r24, 0x32	; 50
     450:	a1 05       	cpc	r26, r1
     452:	b1 05       	cpc	r27, r1
     454:	08 f0       	brcs	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		{
			PORTD |= (1<<L_SOLENOID);	//Set output PIND7 to 1 to trigger relay
		}
		else
		{
			PORTD &= ~(1<<L_SOLENOID);	//Set output PIND7 to 0 to turn off relay
     456:	5f 98       	cbi	0x0b, 7	; 11
		{
			solenoid_ctrl(L_SOLENOID, OFF);			//Turn off left solenoid
			//LS_previous_time = current_time;
		}
		
		if (B_BTN_PRESS != B_BUTTONSTATE)			//Checks to see if shoot ball button state has changed
     458:	3a 88       	ldd	r3, Y+18	; 0x12
     45a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     45c:	33 15       	cp	r19, r3
     45e:	99 f0       	breq	.+38     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			B_BUTTONSTATE = B_BTN_PRESS;			//Update shoot ball button state
			if (B_BTN_PRESS == true)				//If shoot ball button is currently being pressed
     460:	33 20       	and	r3, r3
     462:	31 f0       	breq	.+12     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			{
				KEY_Safe_time = current_time;
				Keyboard.press(KEY_RETURN);		//Send left arrow key press to PC ***THIS NEEDS TO BE CHANGED TO NEW KEY***
     464:	60 eb       	ldi	r22, 0xB0	; 176
     466:	87 e5       	ldi	r24, 0x57	; 87
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN9Keyboard_5pressEh>
     46e:	0b c0       	rjmp	.+22     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
{
	if (SOLENOID == R_SOLENOID)			//If right solenoid state needs to be changed
	{
		if (STATE == ON)				//If solenoid needs to be powered on
		{
			PORTD |= (1<<R_SOLENOID);	//Set output PIND4 to 1 to trigger relay (Power on solenoid 12V)
     470:	5c 9a       	sbi	0x0b, 4	; 11
	}
	else if (SOLENOID == L_SOLENOID)	//If left solenoid state needs to be changed
	{
		if (STATE == ON)				//If solenoid needs to be powered on
		{
			PORTD |= (1<<L_SOLENOID);	//Set output PIND7 to 1 to trigger relay
     472:	5f 9a       	sbi	0x0b, 7	; 11
			{
				RS_previous_time = current_time;
				LS_previous_time = current_time;
				solenoid_ctrl(R_SOLENOID, ON);		//Turn on right solenoid
				solenoid_ctrl(L_SOLENOID, ON);		//Turn on left solenoid
				Keyboard.release(KEY_RETURN);	//Stop sending left arrow key press to PC ***THIS NEEDS TO BE CHANGED TO NEW KEY***
     474:	60 eb       	ldi	r22, 0xB0	; 176
     476:	87 e5       	ldi	r24, 0x57	; 87
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
				KEY_Safe_time = current_time;
				Keyboard.press(KEY_RETURN);		//Send left arrow key press to PC ***THIS NEEDS TO BE CHANGED TO NEW KEY***
			}
			else									//Shoot ball button is being held or not pressed
			{
				RS_previous_time = current_time;
     47e:	26 01       	movw	r4, r12
     480:	37 01       	movw	r6, r14
				LS_previous_time = current_time;
     482:	46 01       	movw	r8, r12
     484:	57 01       	movw	r10, r14
				solenoid_ctrl(L_SOLENOID, ON);		//Turn on left solenoid
				Keyboard.release(KEY_RETURN);	//Stop sending left arrow key press to PC ***THIS NEEDS TO BE CHANGED TO NEW KEY***
			}
		}
		
		if (E_BTN_PRESS != E_BUTTONSTATE)			//Checks to see if left button state has changed (Pressed or released)
     486:	19 89       	ldd	r17, Y+17	; 0x11
     488:	4b 8d       	ldd	r20, Y+27	; 0x1b
     48a:	41 17       	cp	r20, r17
     48c:	31 f0       	breq	.+12     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
		{
			E_BUTTONSTATE = E_BTN_PRESS;			//Update e button state
			if (E_BTN_PRESS == true)				//If e button is currently being pressed
     48e:	11 23       	and	r17, r17
     490:	21 f0       	breq	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			{
				R_BTN_PRESS = false;
     492:	1c 8a       	std	Y+20, r1	; 0x14
				L_BTN_PRESS = false;
     494:	1b 8a       	std	Y+19, r1	; 0x13
				B_BTN_PRESS = false;
     496:	1a 8a       	std	Y+18, r1	; 0x12
				E_BTN_PRESS = false;
     498:	19 8a       	std	Y+17, r1	; 0x11
				//Keyboard.release(KEY_RETURN);	//Stop sending e arrow key press to PC
			}
		}
		
		
		if (current_time - SOL_Safe_time >= 4000)
     49a:	d7 01       	movw	r26, r14
     49c:	c6 01       	movw	r24, r12
     49e:	2d 89       	ldd	r18, Y+21	; 0x15
     4a0:	3e 89       	ldd	r19, Y+22	; 0x16
     4a2:	4f 89       	ldd	r20, Y+23	; 0x17
     4a4:	58 8d       	ldd	r21, Y+24	; 0x18
     4a6:	82 1b       	sub	r24, r18
     4a8:	93 0b       	sbc	r25, r19
     4aa:	a4 0b       	sbc	r26, r20
     4ac:	b5 0b       	sbc	r27, r21
     4ae:	80 3a       	cpi	r24, 0xA0	; 160
     4b0:	9f 40       	sbci	r25, 0x0F	; 15
     4b2:	a1 05       	cpc	r26, r1
     4b4:	b1 05       	cpc	r27, r1
     4b6:	30 f0       	brcs	.+12     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		{
			PORTD |= (1<<R_SOLENOID);	//Set output PIND4 to 1 to trigger relay (Power on solenoid 12V)
		}
		else							//I used "else" instead of "if else (STATE == OFF)" to prevent mistakes that keep the solenoid power on too long. Solenoid can burn out if left on too long (8s or more)
		{
			PORTD &= ~(1<<R_SOLENOID);	//Set output PIND4 to 0 to turn off relay (Power off solenoid 12V)
     4b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			PORTD |= (1<<L_SOLENOID);	//Set output PIND7 to 1 to trigger relay
		}
		else
		{
			PORTD &= ~(1<<L_SOLENOID);	//Set output PIND7 to 0 to turn off relay
     4ba:	5f 98       	cbi	0x0b, 7	; 11
		
		if (current_time - SOL_Safe_time >= 4000)
		{
			solenoid_ctrl(R_SOLENOID, OFF);			//Turn off right solenoid
			solenoid_ctrl(L_SOLENOID, OFF);			//Turn off left solenoid
			SOL_Safe_time = current_time;
     4bc:	cd 8a       	std	Y+21, r12	; 0x15
     4be:	de 8a       	std	Y+22, r13	; 0x16
     4c0:	ef 8a       	std	Y+23, r14	; 0x17
     4c2:	f8 8e       	std	Y+24, r15	; 0x18
		}
		
		if (R_BTN_PRESS == false)
     4c4:	8c 89       	ldd	r24, Y+20	; 0x14
     4c6:	81 11       	cpse	r24, r1
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			Keyboard.release(KEY_RIGHT_ARROW);
     4ca:	67 ed       	ldi	r22, 0xD7	; 215
     4cc:	87 e5       	ldi	r24, 0x57	; 87
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
		}
		if (L_BTN_PRESS == false)
     4d4:	8b 89       	ldd	r24, Y+19	; 0x13
     4d6:	81 11       	cpse	r24, r1
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
		{
			Keyboard.release(KEY_LEFT_ARROW);
     4da:	68 ed       	ldi	r22, 0xD8	; 216
     4dc:	87 e5       	ldi	r24, 0x57	; 87
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
		}
		if (B_BTN_PRESS == false)
     4e4:	8a 89       	ldd	r24, Y+18	; 0x12
     4e6:	88 23       	and	r24, r24
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
  * @brief Main loop for AVR ("loop()" must be used instead of "main()" because Arduino.h library requires it)
  * @param None
  * @retval None
  */
void loop()
{
     4ea:	1b 8f       	std	Y+27, r17	; 0x1b
     4ec:	3a 8e       	std	Y+26, r3	; 0x1a
     4ee:	09 8f       	std	Y+25, r16	; 0x19
     4f0:	32 2c       	mov	r3, r2
     4f2:	44 cf       	rjmp	.-376    	; 0x37c <loop+0x58>
		{
			Keyboard.release(KEY_LEFT_ARROW);
		}
		if (B_BTN_PRESS == false)
		{
			Keyboard.release(KEY_RETURN);
     4f4:	60 eb       	ldi	r22, 0xB0	; 176
     4f6:	87 e5       	ldi	r24, 0x57	; 87
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
     4fe:	f5 cf       	rjmp	.-22     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>

00000500 <initVariant>:
     500:	08 95       	ret

00000502 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     502:	0e 94 84 07 	call	0xf08	; 0xf08 <init>

	initVariant();
     506:	0e 94 80 02 	call	0x500	; 0x500 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     50a:	8e e3       	ldi	r24, 0x3E	; 62
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     512:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     516:	c0 e0       	ldi	r28, 0x00	; 0
     518:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     51a:	0e 94 92 01 	call	0x324	; 0x324 <loop>
		if (serialEventRun) serialEventRun();
     51e:	20 97       	sbiw	r28, 0x00	; 0
     520:	e1 f3       	breq	.-8      	; 0x51a <main+0x18>
     522:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     526:	f9 cf       	rjmp	.-14     	; 0x51a <main+0x18>

00000528 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     528:	61 50       	subi	r22, 0x01	; 1
     52a:	30 f0       	brcs	.+12     	; 0x538 <_ZL4RecvPVhh+0x10>
     52c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	f8 cf       	rjmp	.-16     	; 0x528 <_ZL4RecvPVhh>
     538:	28 98       	cbi	0x05, 0	; 5
     53a:	84 e6       	ldi	r24, 0x64	; 100
     53c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <RxLEDPulse>
     540:	08 95       	ret

00000542 <_ZL11SendControlh>:
     542:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <_ZL6_cmark>
     546:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <_ZL6_cmark+0x1>
     54a:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZL5_cend>
     54e:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <_ZL5_cend+0x1>
     552:	42 17       	cp	r20, r18
     554:	53 07       	cpc	r21, r19
     556:	b4 f4       	brge	.+44     	; 0x584 <_ZL11SendControlh+0x42>
     558:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     55c:	95 70       	andi	r25, 0x05	; 5
     55e:	e1 f3       	breq	.-8      	; 0x558 <_ZL11SendControlh+0x16>
     560:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     564:	92 fd       	sbrc	r25, 2
     566:	19 c0       	rjmp	.+50     	; 0x59a <_ZL11SendControlh+0x58>
     568:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     56c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZL6_cmark>
     570:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZL6_cmark+0x1>
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	8f 73       	andi	r24, 0x3F	; 63
     578:	99 27       	eor	r25, r25
     57a:	89 2b       	or	r24, r25
     57c:	19 f4       	brne	.+6      	; 0x584 <_ZL11SendControlh+0x42>
     57e:	8e ef       	ldi	r24, 0xFE	; 254
     580:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     584:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZL6_cmark>
     588:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZL6_cmark+0x1>
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_ZL6_cmark+0x1>
     592:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_ZL6_cmark>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	08 95       	ret
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret

0000059e <_ZL24USB_SendStringDescriptorPKhhh>:
     59e:	df 92       	push	r13
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	d8 2e       	mov	r13, r24
     5ae:	f9 2e       	mov	r15, r25
     5b0:	e4 2e       	mov	r14, r20
     5b2:	06 2f       	mov	r16, r22
     5b4:	10 e0       	ldi	r17, 0x00	; 0
     5b6:	c8 01       	movw	r24, r16
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	88 0f       	add	r24, r24
     5bc:	0e 94 a1 02 	call	0x542	; 0x542 <_ZL11SendControlh>
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	0e 94 a1 02 	call	0x542	; 0x542 <_ZL11SendControlh>
     5c6:	cd 2d       	mov	r28, r13
     5c8:	df 2d       	mov	r29, r15
     5ca:	0c 0f       	add	r16, r28
     5cc:	1d 1f       	adc	r17, r29
     5ce:	c0 17       	cp	r28, r16
     5d0:	d1 07       	cpc	r29, r17
     5d2:	89 f0       	breq	.+34     	; 0x5f6 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     5d4:	e7 fe       	sbrs	r14, 7
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     5d8:	fe 01       	movw	r30, r28
     5da:	84 91       	lpm	r24, Z
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     5de:	88 81       	ld	r24, Y
     5e0:	0e 94 a1 02 	call	0x542	; 0x542 <_ZL11SendControlh>
     5e4:	f8 2e       	mov	r15, r24
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 a1 02 	call	0x542	; 0x542 <_ZL11SendControlh>
     5ec:	8f 21       	and	r24, r15
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	81 11       	cpse	r24, r1
     5f2:	ed cf       	rjmp	.-38     	; 0x5ce <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	08 95       	ret

00000608 <_ZL15USB_ClockEnablev>:
     608:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     60c:	81 60       	ori	r24, 0x01	; 1
     60e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     612:	80 ea       	ldi	r24, 0xA0	; 160
     614:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     618:	89 b5       	in	r24, 0x29	; 41
     61a:	80 61       	ori	r24, 0x10	; 16
     61c:	89 bd       	out	0x29, r24	; 41
     61e:	89 b5       	in	r24, 0x29	; 41
     620:	82 60       	ori	r24, 0x02	; 2
     622:	89 bd       	out	0x29, r24	; 41
     624:	09 b4       	in	r0, 0x29	; 41
     626:	00 fe       	sbrs	r0, 0
     628:	fd cf       	rjmp	.-6      	; 0x624 <_ZL15USB_ClockEnablev+0x1c>
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 48 07 	call	0xe90	; 0xe90 <delay>
     636:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     63a:	8f 7c       	andi	r24, 0xCF	; 207
     63c:	80 61       	ori	r24, 0x10	; 16
     63e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     642:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     646:	80 7f       	andi	r24, 0xF0	; 240
     648:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     64c:	08 95       	ret

0000064e <_ZL14SendInterfacesv>:
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	1f 92       	push	r1
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	19 82       	std	Y+1, r1	; 0x01
     65a:	ce 01       	movw	r24, r28
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z16CDC_GetInterfacePh>
     662:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z12PluggableUSBv>
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN13PluggableUSB_12getInterfaceEPh>
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <_ZN6LockEPC1Eh>:
     67a:	2f b7       	in	r18, 0x3f	; 63
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	f8 94       	cli
     682:	67 70       	andi	r22, 0x07	; 7
     684:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     688:	08 95       	ret

0000068a <_Z13USB_Availableh>:
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	68 2f       	mov	r22, r24
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6LockEPC1Eh>
     69e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	9f bf       	out	0x3f, r25	; 63
     6a6:	0f 90       	pop	r0
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <_Z8USB_RecvhPvi>:
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	1f 92       	push	r1
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_usbConfiguration>
     6c4:	99 23       	and	r25, r25
     6c6:	11 f0       	breq	.+4      	; 0x6cc <_Z8USB_RecvhPvi+0x1e>
     6c8:	57 ff       	sbrs	r21, 7
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <_Z8USB_RecvhPvi+0x24>
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	9f ef       	ldi	r25, 0xFF	; 255
     6d0:	29 c0       	rjmp	.+82     	; 0x724 <_Z8USB_RecvhPvi+0x76>
     6d2:	8a 01       	movw	r16, r20
     6d4:	7b 01       	movw	r14, r22
     6d6:	68 2f       	mov	r22, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6LockEPC1Eh>
     6e0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	02 17       	cp	r16, r18
     6e8:	13 07       	cpc	r17, r19
     6ea:	0c f4       	brge	.+2      	; 0x6ee <_Z8USB_RecvhPvi+0x40>
     6ec:	98 01       	movw	r18, r16
     6ee:	82 2f       	mov	r24, r18
     6f0:	f7 01       	movw	r30, r14
     6f2:	94 e6       	ldi	r25, 0x64	; 100
     6f4:	81 50       	subi	r24, 0x01	; 1
     6f6:	38 f0       	brcs	.+14     	; 0x706 <_Z8USB_RecvhPvi+0x58>
     6f8:	28 98       	cbi	0x05, 0	; 5
     6fa:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <RxLEDPulse>
     6fe:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     702:	41 93       	st	Z+, r20
     704:	f7 cf       	rjmp	.-18     	; 0x6f4 <_Z8USB_RecvhPvi+0x46>
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	21 f0       	breq	.+8      	; 0x714 <_Z8USB_RecvhPvi+0x66>
     70c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     710:	88 23       	and	r24, r24
     712:	21 f0       	breq	.+8      	; 0x71c <_Z8USB_RecvhPvi+0x6e>
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	8f bf       	out	0x3f, r24	; 63
     718:	c9 01       	movw	r24, r18
     71a:	04 c0       	rjmp	.+8      	; 0x724 <_Z8USB_RecvhPvi+0x76>
     71c:	8b e6       	ldi	r24, 0x6B	; 107
     71e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     722:	f8 cf       	rjmp	.-16     	; 0x714 <_Z8USB_RecvhPvi+0x66>
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <_Z8USB_Recvh>:
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	0e 94 57 03 	call	0x6ae	; 0x6ae <_Z8USB_RecvhPvi>
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	19 f4       	brne	.+6      	; 0x756 <_Z8USB_Recvh+0x22>
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <_Z8USB_Recvh+0x26>
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	9f ef       	ldi	r25, 0xFF	; 255
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_Z13USB_SendSpaceh>:
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	68 2f       	mov	r22, r24
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6LockEPC1Eh>
     776:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     77a:	89 2f       	mov	r24, r25
     77c:	80 72       	andi	r24, 0x20	; 32
     77e:	95 ff       	sbrs	r25, 5
     780:	04 c0       	rjmp	.+8      	; 0x78a <_Z13USB_SendSpaceh+0x28>
     782:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     786:	80 e4       	ldi	r24, 0x40	; 64
     788:	89 1b       	sub	r24, r25
     78a:	99 81       	ldd	r25, Y+1	; 0x01
     78c:	9f bf       	out	0x3f, r25	; 63
     78e:	0f 90       	pop	r0
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <_Z8USB_SendhPKvi>:
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	1f 92       	push	r1
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	98 2e       	mov	r9, r24
     7bc:	6b 01       	movw	r12, r22
     7be:	b4 2e       	mov	r11, r20
     7c0:	05 2f       	mov	r16, r21
     7c2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_usbConfiguration>
     7c6:	81 11       	cpse	r24, r1
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <_Z8USB_SendhPKvi+0x3a>
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	77 c0       	rjmp	.+238    	; 0x8be <_Z8USB_SendhPKvi+0x128>
     7d0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_usbSuspendState>
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <_Z8USB_SendhPKvi+0x4c>
     7d8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     7e2:	eb 2c       	mov	r14, r11
     7e4:	f0 2e       	mov	r15, r16
     7e6:	a1 2c       	mov	r10, r1
     7e8:	8a ef       	ldi	r24, 0xFA	; 250
     7ea:	88 2e       	mov	r8, r24
     7ec:	89 2d       	mov	r24, r9
     7ee:	80 72       	andi	r24, 0x20	; 32
     7f0:	68 2e       	mov	r6, r24
     7f2:	89 2d       	mov	r24, r9
     7f4:	80 74       	andi	r24, 0x40	; 64
     7f6:	58 2e       	mov	r5, r24
     7f8:	9a e3       	ldi	r25, 0x3A	; 58
     7fa:	79 2e       	mov	r7, r25
     7fc:	e1 14       	cp	r14, r1
     7fe:	f1 04       	cpc	r15, r1
     800:	19 f4       	brne	.+6      	; 0x808 <_Z8USB_SendhPKvi+0x72>
     802:	aa 20       	and	r10, r10
     804:	09 f4       	brne	.+2      	; 0x808 <_Z8USB_SendhPKvi+0x72>
     806:	55 c0       	rjmp	.+170    	; 0x8b2 <_Z8USB_SendhPKvi+0x11c>
     808:	89 2d       	mov	r24, r9
     80a:	0e 94 b1 03 	call	0x762	; 0x762 <_Z13USB_SendSpaceh>
     80e:	18 2f       	mov	r17, r24
     810:	81 11       	cpse	r24, r1
     812:	0a c0       	rjmp	.+20     	; 0x828 <_Z8USB_SendhPKvi+0x92>
     814:	8a 94       	dec	r8
     816:	88 20       	and	r8, r8
     818:	c1 f2       	breq	.-80     	; 0x7ca <_Z8USB_SendhPKvi+0x34>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 48 07 	call	0xe90	; 0xe90 <delay>
     826:	ea cf       	rjmp	.-44     	; 0x7fc <_Z8USB_SendhPKvi+0x66>
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	e8 16       	cp	r14, r24
     82c:	f9 06       	cpc	r15, r25
     82e:	0c f4       	brge	.+2      	; 0x832 <_Z8USB_SendhPKvi+0x9c>
     830:	1e 2d       	mov	r17, r14
     832:	69 2d       	mov	r22, r9
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6LockEPC1Eh>
     83c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     840:	85 ff       	sbrs	r24, 5
     842:	34 c0       	rjmp	.+104    	; 0x8ac <_Z8USB_SendhPKvi+0x116>
     844:	81 2f       	mov	r24, r17
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	e8 1a       	sub	r14, r24
     84a:	f9 0a       	sbc	r15, r25
     84c:	66 20       	and	r6, r6
     84e:	29 f0       	breq	.+10     	; 0x85a <_Z8USB_SendhPKvi+0xc4>
     850:	11 50       	subi	r17, 0x01	; 1
     852:	a0 f0       	brcs	.+40     	; 0x87c <_Z8USB_SendhPKvi+0xe6>
     854:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     858:	fb cf       	rjmp	.-10     	; 0x850 <_Z8USB_SendhPKvi+0xba>
     85a:	f6 01       	movw	r30, r12
     85c:	97 fe       	sbrs	r9, 7
     85e:	0a c0       	rjmp	.+20     	; 0x874 <_Z8USB_SendhPKvi+0xde>
     860:	11 50       	subi	r17, 0x01	; 1
     862:	50 f0       	brcs	.+20     	; 0x878 <_Z8USB_SendhPKvi+0xe2>
     864:	24 91       	lpm	r18, Z
     866:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     86a:	31 96       	adiw	r30, 0x01	; 1
     86c:	f9 cf       	rjmp	.-14     	; 0x860 <_Z8USB_SendhPKvi+0xca>
     86e:	21 91       	ld	r18, Z+
     870:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     874:	11 50       	subi	r17, 0x01	; 1
     876:	d8 f7       	brcc	.-10     	; 0x86e <_Z8USB_SendhPKvi+0xd8>
     878:	c8 0e       	add	r12, r24
     87a:	d9 1e       	adc	r13, r25
     87c:	aa 20       	and	r10, r10
     87e:	19 f0       	breq	.+6      	; 0x886 <_Z8USB_SendhPKvi+0xf0>
     880:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     884:	0b c0       	rjmp	.+22     	; 0x89c <_Z8USB_SendhPKvi+0x106>
     886:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     88a:	85 fd       	sbrc	r24, 5
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <_Z8USB_SendhPKvi+0x10a>
     88e:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     892:	aa 24       	eor	r10, r10
     894:	a3 94       	inc	r10
     896:	e1 14       	cp	r14, r1
     898:	f1 04       	cpc	r15, r1
     89a:	41 f0       	breq	.+16     	; 0x8ac <_Z8USB_SendhPKvi+0x116>
     89c:	a1 2c       	mov	r10, r1
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <_Z8USB_SendhPKvi+0x116>
     8a0:	e1 14       	cp	r14, r1
     8a2:	f1 04       	cpc	r15, r1
     8a4:	19 f4       	brne	.+6      	; 0x8ac <_Z8USB_SendhPKvi+0x116>
     8a6:	51 10       	cpse	r5, r1
     8a8:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	8f bf       	out	0x3f, r24	; 63
     8b0:	a5 cf       	rjmp	.-182    	; 0x7fc <_Z8USB_SendhPKvi+0x66>
     8b2:	5d 98       	cbi	0x0b, 5	; 11
     8b4:	84 e6       	ldi	r24, 0x64	; 100
     8b6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <TxLEDPulse>
     8ba:	8b 2d       	mov	r24, r11
     8bc:	90 2f       	mov	r25, r16
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	08 95       	ret

000008e0 <_Z11InitControli>:
     8e0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     8e4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZL6_cmark+0x1>
     8e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZL6_cmark>
     8ec:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_ZL5_cend+0x1>
     8f0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZL5_cend>
     8f4:	08 95       	ret

000008f6 <_Z15USB_SendControlhPKvi>:
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	d8 2e       	mov	r13, r24
     906:	8a 01       	movw	r16, r20
     908:	7b 01       	movw	r14, r22
     90a:	e4 0e       	add	r14, r20
     90c:	f5 1e       	adc	r15, r21
     90e:	eb 01       	movw	r28, r22
     910:	ce 15       	cp	r28, r14
     912:	df 05       	cpc	r29, r15
     914:	71 f0       	breq	.+28     	; 0x932 <_Z15USB_SendControlhPKvi+0x3c>
     916:	d7 fe       	sbrs	r13, 7
     918:	03 c0       	rjmp	.+6      	; 0x920 <_Z15USB_SendControlhPKvi+0x2a>
     91a:	fe 01       	movw	r30, r28
     91c:	84 91       	lpm	r24, Z
     91e:	01 c0       	rjmp	.+2      	; 0x922 <_Z15USB_SendControlhPKvi+0x2c>
     920:	88 81       	ld	r24, Y
     922:	0e 94 a1 02 	call	0x542	; 0x542 <_ZL11SendControlh>
     926:	21 96       	adiw	r28, 0x01	; 1
     928:	81 11       	cpse	r24, r1
     92a:	f2 cf       	rjmp	.-28     	; 0x910 <_Z15USB_SendControlhPKvi+0x1a>
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	01 c0       	rjmp	.+2      	; 0x934 <_Z15USB_SendControlhPKvi+0x3e>
     932:	c8 01       	movw	r24, r16
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	08 95       	ret

00000944 <_Z15USB_RecvControlPvi>:
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	5c 01       	movw	r10, r24
     958:	8b 01       	movw	r16, r22
     95a:	eb 01       	movw	r28, r22
     95c:	9b ef       	ldi	r25, 0xFB	; 251
     95e:	d9 2e       	mov	r13, r25
     960:	20 97       	sbiw	r28, 0x00	; 0
     962:	c1 f0       	breq	.+48     	; 0x994 <_Z15USB_RecvControlPvi+0x50>
     964:	7e 01       	movw	r14, r28
     966:	c1 34       	cpi	r28, 0x41	; 65
     968:	d1 05       	cpc	r29, r1
     96a:	1c f0       	brlt	.+6      	; 0x972 <_Z15USB_RecvControlPvi+0x2e>
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	e8 2e       	mov	r14, r24
     970:	f1 2c       	mov	r15, r1
     972:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     976:	82 ff       	sbrs	r24, 2
     978:	fc cf       	rjmp	.-8      	; 0x972 <_Z15USB_RecvControlPvi+0x2e>
     97a:	c8 01       	movw	r24, r16
     97c:	8c 1b       	sub	r24, r28
     97e:	9d 0b       	sbc	r25, r29
     980:	6e 2d       	mov	r22, r14
     982:	8a 0d       	add	r24, r10
     984:	9b 1d       	adc	r25, r11
     986:	0e 94 94 02 	call	0x528	; 0x528 <_ZL4RecvPVhh>
     98a:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     98e:	ce 19       	sub	r28, r14
     990:	df 09       	sbc	r29, r15
     992:	e6 cf       	rjmp	.-52     	; 0x960 <_Z15USB_RecvControlPvi+0x1c>
     994:	c8 01       	movw	r24, r16
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	08 95       	ret

000009aa <__vector_11>:
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	6c 97       	sbiw	r28, 0x1c	; 28
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     9ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     9ee:	83 ff       	sbrs	r24, 3
     9f0:	17 c1       	rjmp	.+558    	; 0xc20 <__stack+0x121>
     9f2:	68 e0       	ldi	r22, 0x08	; 8
     9f4:	ce 01       	movw	r24, r28
     9f6:	45 96       	adiw	r24, 0x15	; 21
     9f8:	0e 94 94 02 	call	0x528	; 0x528 <_ZL4RecvPVhh>
     9fc:	82 ef       	ldi	r24, 0xF2	; 242
     9fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a02:	8d 89       	ldd	r24, Y+21	; 0x15
     a04:	87 ff       	sbrs	r24, 7
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <__DATA_REGION_LENGTH__+0x12>
     a08:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a0c:	90 ff       	sbrs	r25, 0
     a0e:	fc cf       	rjmp	.-8      	; 0xa08 <__DATA_REGION_LENGTH__+0x8>
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
     a12:	9e ef       	ldi	r25, 0xFE	; 254
     a14:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a18:	98 2f       	mov	r25, r24
     a1a:	90 76       	andi	r25, 0x60	; 96
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__DATA_REGION_LENGTH__+0x20>
     a1e:	d8 c0       	rjmp	.+432    	; 0xbd0 <__stack+0xd1>
     a20:	9e 89       	ldd	r25, Y+22	; 0x16
     a22:	4f 89       	ldd	r20, Y+23	; 0x17
     a24:	58 8d       	ldd	r21, Y+24	; 0x18
     a26:	2f 89       	ldd	r18, Y+23	; 0x17
     a28:	18 8d       	ldd	r17, Y+24	; 0x18
     a2a:	91 11       	cpse	r25, r1
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <__DATA_REGION_LENGTH__+0x46>
     a2e:	80 38       	cpi	r24, 0x80	; 128
     a30:	29 f4       	brne	.+10     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
     a32:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_usbCurrentStatus>
     a36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__DATA_REGION_LENGTH__+0x40>
     a3c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a40:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a44:	e6 c0       	rjmp	.+460    	; 0xc12 <__stack+0x113>
     a46:	91 30       	cpi	r25, 0x01	; 1
     a48:	51 f4       	brne	.+20     	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
     a4a:	81 11       	cpse	r24, r1
     a4c:	e2 c0       	rjmp	.+452    	; 0xc12 <__stack+0x113>
     a4e:	41 30       	cpi	r20, 0x01	; 1
     a50:	51 05       	cpc	r21, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
     a54:	de c0       	rjmp	.+444    	; 0xc12 <__stack+0x113>
     a56:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_usbCurrentStatus>
     a5a:	8d 7f       	andi	r24, 0xFD	; 253
     a5c:	0b c0       	rjmp	.+22     	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     a5e:	93 30       	cpi	r25, 0x03	; 3
     a60:	61 f4       	brne	.+24     	; 0xa7a <__DATA_REGION_LENGTH__+0x7a>
     a62:	81 11       	cpse	r24, r1
     a64:	d6 c0       	rjmp	.+428    	; 0xc12 <__stack+0x113>
     a66:	41 30       	cpi	r20, 0x01	; 1
     a68:	51 05       	cpc	r21, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <__DATA_REGION_LENGTH__+0x6e>
     a6c:	d2 c0       	rjmp	.+420    	; 0xc12 <__stack+0x113>
     a6e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_usbCurrentStatus>
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_usbCurrentStatus>
     a78:	cc c0       	rjmp	.+408    	; 0xc12 <__stack+0x113>
     a7a:	95 30       	cpi	r25, 0x05	; 5
     a7c:	49 f4       	brne	.+18     	; 0xa90 <__DATA_REGION_LENGTH__+0x90>
     a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a82:	80 ff       	sbrs	r24, 0
     a84:	fc cf       	rjmp	.-8      	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
     a86:	82 2f       	mov	r24, r18
     a88:	80 68       	ori	r24, 0x80	; 128
     a8a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
     a8e:	c1 c0       	rjmp	.+386    	; 0xc12 <__stack+0x113>
     a90:	96 30       	cpi	r25, 0x06	; 6
     a92:	09 f0       	breq	.+2      	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
     a94:	70 c0       	rjmp	.+224    	; 0xb76 <__stack+0x77>
     a96:	eb 8c       	ldd	r14, Y+27	; 0x1b
     a98:	fc 8c       	ldd	r15, Y+28	; 0x1c
     a9a:	12 30       	cpi	r17, 0x02	; 2
     a9c:	69 f5       	brne	.+90     	; 0xaf8 <__DATA_REGION_LENGTH__+0xf8>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_Z11InitControli>
     aa6:	0e 94 27 03 	call	0x64e	; 0x64e <_ZL14SendInterfacesv>
     aaa:	99 e0       	ldi	r25, 0x09	; 9
     aac:	9e 01       	movw	r18, r28
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	69 01       	movw	r12, r18
     ab4:	f9 01       	movw	r30, r18
     ab6:	29 2f       	mov	r18, r25
     ab8:	11 92       	st	Z+, r1
     aba:	2a 95       	dec	r18
     abc:	e9 f7       	brne	.-6      	; 0xab8 <__DATA_REGION_LENGTH__+0xb8>
     abe:	99 83       	std	Y+1, r25	; 0x01
     ac0:	1a 83       	std	Y+2, r17	; 0x02
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	9e 83       	std	Y+6, r25	; 0x06
     ac6:	90 ea       	ldi	r25, 0xA0	; 160
     ac8:	98 87       	std	Y+8, r25	; 0x08
     aca:	9a ef       	ldi	r25, 0xFA	; 250
     acc:	99 87       	std	Y+9, r25	; 0x09
     ace:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <_ZL6_cmark>
     ad2:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <_ZL6_cmark+0x1>
     ad6:	27 5f       	subi	r18, 0xF7	; 247
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	3c 83       	std	Y+4, r19	; 0x04
     adc:	2b 83       	std	Y+3, r18	; 0x03
     ade:	8d 83       	std	Y+5, r24	; 0x05
     ae0:	c7 01       	movw	r24, r14
     ae2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_Z11InitControli>
     ae6:	49 e0       	ldi	r20, 0x09	; 9
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	b6 01       	movw	r22, r12
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>
     af2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZL14SendInterfacesv>
     af6:	8d c0       	rjmp	.+282    	; 0xc12 <__stack+0x113>
     af8:	c7 01       	movw	r24, r14
     afa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_Z11InitControli>
     afe:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z12PluggableUSBv>
     b02:	be 01       	movw	r22, r28
     b04:	6b 5e       	subi	r22, 0xEB	; 235
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	19 f0       	breq	.+6      	; 0xb16 <__stack+0x17>
     b10:	0c f0       	brlt	.+2      	; 0xb14 <__stack+0x15>
     b12:	7f c0       	rjmp	.+254    	; 0xc12 <__stack+0x113>
     b14:	82 c0       	rjmp	.+260    	; 0xc1a <__stack+0x11b>
     b16:	11 30       	cpi	r17, 0x01	; 1
     b18:	09 f4       	brne	.+2      	; 0xb1c <__stack+0x1d>
     b1a:	70 c0       	rjmp	.+224    	; 0xbfc <__stack+0xfd>
     b1c:	13 30       	cpi	r17, 0x03	; 3
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x23>
     b20:	7c c0       	rjmp	.+248    	; 0xc1a <__stack+0x11b>
     b22:	8f 89       	ldd	r24, Y+23	; 0x17
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <__stack+0x2b>
     b28:	6c c0       	rjmp	.+216    	; 0xc02 <__stack+0x103>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	29 f4       	brne	.+10     	; 0xb38 <__stack+0x39>
     b2e:	40 e8       	ldi	r20, 0x80	; 128
     b30:	60 e1       	ldi	r22, 0x10	; 16
     b32:	8a ec       	ldi	r24, 0xCA	; 202
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <__stack+0x45>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	39 f4       	brne	.+14     	; 0xb4a <__stack+0x4b>
     b3c:	40 e8       	ldi	r20, 0x80	; 128
     b3e:	6b e0       	ldi	r22, 0x0B	; 11
     b40:	8e eb       	ldi	r24, 0xBE	; 190
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZL24USB_SendStringDescriptorPKhhh>
     b48:	56 c0       	rjmp	.+172    	; 0xbf6 <__stack+0xf7>
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	09 f0       	breq	.+2      	; 0xb50 <__stack+0x51>
     b4e:	65 c0       	rjmp	.+202    	; 0xc1a <__stack+0x11b>
     b50:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z12PluggableUSBv>
     b54:	8e 01       	movw	r16, r28
     b56:	0f 5f       	subi	r16, 0xFF	; 255
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	b8 01       	movw	r22, r16
     b5c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN13PluggableUSB_12getShortNameEPc>
     b60:	f8 01       	movw	r30, r16
     b62:	01 90       	ld	r0, Z+
     b64:	00 20       	and	r0, r0
     b66:	e9 f7       	brne	.-6      	; 0xb62 <__stack+0x63>
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	bf 01       	movw	r22, r30
     b6c:	60 1b       	sub	r22, r16
     b6e:	71 0b       	sbc	r23, r17
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	c8 01       	movw	r24, r16
     b74:	e7 cf       	rjmp	.-50     	; 0xb44 <__stack+0x45>
     b76:	97 30       	cpi	r25, 0x07	; 7
     b78:	09 f4       	brne	.+2      	; 0xb7c <__stack+0x7d>
     b7a:	4f c0       	rjmp	.+158    	; 0xc1a <__stack+0x11b>
     b7c:	98 30       	cpi	r25, 0x08	; 8
     b7e:	21 f4       	brne	.+8      	; 0xb88 <__stack+0x89>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     b86:	45 c0       	rjmp	.+138    	; 0xc12 <__stack+0x113>
     b88:	99 30       	cpi	r25, 0x09	; 9
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__stack+0x8f>
     b8c:	42 c0       	rjmp	.+132    	; 0xc12 <__stack+0x113>
     b8e:	83 70       	andi	r24, 0x03	; 3
     b90:	09 f0       	breq	.+2      	; 0xb94 <__stack+0x95>
     b92:	43 c0       	rjmp	.+134    	; 0xc1a <__stack+0x11b>
     b94:	e1 e0       	ldi	r30, 0x01	; 1
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	31 e0       	ldi	r19, 0x01	; 1
     b9c:	96 e3       	ldi	r25, 0x36	; 54
     b9e:	20 81       	ld	r18, Z
     ba0:	21 11       	cpse	r18, r1
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__stack+0xb7>
     ba4:	8e e7       	ldi	r24, 0x7E	; 126
     ba6:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
     baa:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
     bae:	8f 89       	ldd	r24, Y+23	; 0x17
     bb0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_usbConfiguration>
     bb4:	2e c0       	rjmp	.+92     	; 0xc12 <__stack+0x113>
     bb6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     bba:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     bbe:	21 91       	ld	r18, Z+
     bc0:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     bc4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	87 30       	cpi	r24, 0x07	; 7
     bcc:	41 f7       	brne	.-48     	; 0xb9e <__stack+0x9f>
     bce:	ea cf       	rjmp	.-44     	; 0xba4 <__stack+0xa5>
     bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_Z11InitControli>
     bd8:	89 8d       	ldd	r24, Y+25	; 0x19
     bda:	81 11       	cpse	r24, r1
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__stack+0xe9>
     bde:	ce 01       	movw	r24, r28
     be0:	45 96       	adiw	r24, 0x15	; 21
     be2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z9CDC_SetupR8USBSetup>
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <__stack+0xf7>
     be8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z12PluggableUSBv>
     bec:	be 01       	movw	r22, r28
     bee:	6b 5e       	subi	r22, 0xEB	; 235
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN13PluggableUSB_5setupER8USBSetup>
     bf6:	88 23       	and	r24, r24
     bf8:	81 f0       	breq	.+32     	; 0xc1a <__stack+0x11b>
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <__stack+0x113>
     bfc:	6c ea       	ldi	r22, 0xAC	; 172
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <__stack+0x107>
     c02:	6b ed       	ldi	r22, 0xDB	; 219
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	fb 01       	movw	r30, r22
     c08:	44 91       	lpm	r20, Z
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>
     c12:	8e ef       	ldi	r24, 0xFE	; 254
     c14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <__stack+0x121>
     c1a:	81 e2       	ldi	r24, 0x21	; 33
     c1c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     c20:	6c 96       	adiw	r28, 0x1c	; 28
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <_Z9USB_Flushh>:
     c5e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     c62:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <_Z9USB_Flushh+0x12>
     c6a:	8a e3       	ldi	r24, 0x3A	; 58
     c6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c70:	08 95       	ret

00000c72 <__vector_10>:
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	cf 93       	push	r28
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
     c96:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     c9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     c9e:	83 7f       	andi	r24, 0xF3	; 243
     ca0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     ca4:	c3 ff       	sbrs	r28, 3
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <__vector_10+0x54>
     ca8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cb2:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     cb6:	82 e3       	ldi	r24, 0x32	; 50
     cb8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     cbc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_usbConfiguration>
     cc0:	88 e0       	ldi	r24, 0x08	; 8
     cc2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     cc6:	c2 ff       	sbrs	r28, 2
     cc8:	19 c0       	rjmp	.+50     	; 0xcfc <__vector_10+0x8a>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_Z9USB_Flushh>
     cd0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <TxLEDPulse>
     cd4:	88 23       	and	r24, r24
     cd6:	39 f0       	breq	.+14     	; 0xce6 <__vector_10+0x74>
     cd8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <TxLEDPulse>
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <TxLEDPulse>
     ce2:	88 23       	and	r24, r24
     ce4:	89 f1       	breq	.+98     	; 0xd48 <__vector_10+0xd6>
     ce6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <RxLEDPulse>
     cea:	88 23       	and	r24, r24
     cec:	39 f0       	breq	.+14     	; 0xcfc <__vector_10+0x8a>
     cee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <RxLEDPulse>
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <RxLEDPulse>
     cf8:	88 23       	and	r24, r24
     cfa:	41 f1       	breq	.+80     	; 0xd4c <__vector_10+0xda>
     cfc:	c4 ff       	sbrs	r28, 4
     cfe:	10 c0       	rjmp	.+32     	; 0xd20 <__vector_10+0xae>
     d00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     d04:	8e 7e       	andi	r24, 0xEE	; 238
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     d0c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     d10:	8f 7e       	andi	r24, 0xEF	; 239
     d12:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     d16:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_usbSuspendState>
     d1a:	8e 7e       	andi	r24, 0xEE	; 238
     d1c:	80 61       	ori	r24, 0x10	; 16
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <__vector_10+0xd0>
     d20:	c0 ff       	sbrs	r28, 0
     d22:	16 c0       	rjmp	.+44     	; 0xd50 <__vector_10+0xde>
     d24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     d28:	8e 7e       	andi	r24, 0xEE	; 238
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     d30:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     d34:	8e 7e       	andi	r24, 0xEE	; 238
     d36:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     d3a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_usbSuspendState>
     d3e:	8e 7e       	andi	r24, 0xEE	; 238
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_usbSuspendState>
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__vector_10+0xde>
     d48:	5d 9a       	sbi	0x0b, 5	; 11
     d4a:	cd cf       	rjmp	.-102    	; 0xce6 <__vector_10+0x74>
     d4c:	28 9a       	sbi	0x05, 0	; 5
     d4e:	d6 cf       	rjmp	.-84     	; 0xcfc <__vector_10+0x8a>
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	cf 91       	pop	r28
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
     d74:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_usbConfiguration>
	_usbCurrentStatus = 0;
     d78:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_usbCurrentStatus>
	_usbSuspendState = 0;
     d7c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_usbSuspendState>
	USB_ClockEnable();
     d80:	0e 94 04 03 	call	0x608	; 0x608 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
     d84:	e1 ee       	ldi	r30, 0xE1	; 225
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8e 7e       	andi	r24, 0xEE	; 238
     d8c:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
     d8e:	8d e0       	ldi	r24, 0x0D	; 13
     d90:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
     d94:	55 9a       	sbi	0x0a, 5	; 10
     d96:	20 9a       	sbi	0x04, 0	; 4
     d98:	08 95       	ret

00000d9a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <timer0_millis>
     db4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <timer0_millis+0x1>
     db8:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <timer0_millis+0x2>
     dbc:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <timer0_millis+0x3>
     dc0:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <timer0_fract>
     dc4:	23 e0       	ldi	r18, 0x03	; 3
     dc6:	23 0f       	add	r18, r19
     dc8:	2d 37       	cpi	r18, 0x7D	; 125
     dca:	20 f4       	brcc	.+8      	; 0xdd4 <__vector_23+0x3a>
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	a1 1d       	adc	r26, r1
     dd0:	b1 1d       	adc	r27, r1
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <__vector_23+0x44>
     dd4:	26 e8       	ldi	r18, 0x86	; 134
     dd6:	23 0f       	add	r18, r19
     dd8:	02 96       	adiw	r24, 0x02	; 2
     dda:	a1 1d       	adc	r26, r1
     ddc:	b1 1d       	adc	r27, r1
     dde:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <timer0_fract>
     de2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <timer0_millis>
     de6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <timer0_millis+0x1>
     dea:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <timer0_millis+0x2>
     dee:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <timer0_millis+0x3>
     df2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <timer0_overflow_count>
     df6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <timer0_overflow_count+0x1>
     dfa:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <timer0_overflow_count+0x2>
     dfe:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <timer0_overflow_count+0x3>
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	a1 1d       	adc	r26, r1
     e06:	b1 1d       	adc	r27, r1
     e08:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <timer0_overflow_count>
     e0c:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <timer0_overflow_count+0x1>
     e10:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <timer0_overflow_count+0x2>
     e14:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <timer0_overflow_count+0x3>
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <millis>:
     e2e:	2f b7       	in	r18, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <timer0_millis>
     e36:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <timer0_millis+0x1>
     e3a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timer0_millis+0x2>
     e3e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timer0_millis+0x3>
     e42:	2f bf       	out	0x3f, r18	; 63
     e44:	08 95       	ret

00000e46 <micros>:
     e46:	3f b7       	in	r19, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <timer0_overflow_count>
     e4e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <timer0_overflow_count+0x1>
     e52:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <timer0_overflow_count+0x2>
     e56:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <timer0_overflow_count+0x3>
     e5a:	26 b5       	in	r18, 0x26	; 38
     e5c:	a8 9b       	sbis	0x15, 0	; 21
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <micros+0x24>
     e60:	2f 3f       	cpi	r18, 0xFF	; 255
     e62:	19 f0       	breq	.+6      	; 0xe6a <micros+0x24>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	a1 1d       	adc	r26, r1
     e68:	b1 1d       	adc	r27, r1
     e6a:	3f bf       	out	0x3f, r19	; 63
     e6c:	ba 2f       	mov	r27, r26
     e6e:	a9 2f       	mov	r26, r25
     e70:	98 2f       	mov	r25, r24
     e72:	88 27       	eor	r24, r24
     e74:	82 0f       	add	r24, r18
     e76:	91 1d       	adc	r25, r1
     e78:	a1 1d       	adc	r26, r1
     e7a:	b1 1d       	adc	r27, r1
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	42 e0       	ldi	r20, 0x02	; 2
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	4a 95       	dec	r20
     e8c:	d1 f7       	brne	.-12     	; 0xe82 <micros+0x3c>
     e8e:	08 95       	ret

00000e90 <delay>:
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	6b 01       	movw	r12, r22
     ea2:	7c 01       	movw	r14, r24
     ea4:	0e 94 23 07 	call	0xe46	; 0xe46 <micros>
     ea8:	4b 01       	movw	r8, r22
     eaa:	5c 01       	movw	r10, r24
     eac:	c1 14       	cp	r12, r1
     eae:	d1 04       	cpc	r13, r1
     eb0:	e1 04       	cpc	r14, r1
     eb2:	f1 04       	cpc	r15, r1
     eb4:	01 f1       	breq	.+64     	; 0xef6 <delay+0x66>
     eb6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <yield>
     eba:	0e 94 23 07 	call	0xe46	; 0xe46 <micros>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	88 19       	sub	r24, r8
     ec4:	99 09       	sbc	r25, r9
     ec6:	aa 09       	sbc	r26, r10
     ec8:	bb 09       	sbc	r27, r11
     eca:	88 3e       	cpi	r24, 0xE8	; 232
     ecc:	93 40       	sbci	r25, 0x03	; 3
     ece:	a1 05       	cpc	r26, r1
     ed0:	b1 05       	cpc	r27, r1
     ed2:	60 f3       	brcs	.-40     	; 0xeac <delay+0x1c>
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	c2 1a       	sub	r12, r18
     ed8:	d1 08       	sbc	r13, r1
     eda:	e1 08       	sbc	r14, r1
     edc:	f1 08       	sbc	r15, r1
     ede:	88 ee       	ldi	r24, 0xE8	; 232
     ee0:	88 0e       	add	r8, r24
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	98 1e       	adc	r9, r24
     ee6:	a1 1c       	adc	r10, r1
     ee8:	b1 1c       	adc	r11, r1
     eea:	c1 14       	cp	r12, r1
     eec:	d1 04       	cpc	r13, r1
     eee:	e1 04       	cpc	r14, r1
     ef0:	f1 04       	cpc	r15, r1
     ef2:	19 f7       	brne	.-58     	; 0xeba <delay+0x2a>
     ef4:	db cf       	rjmp	.-74     	; 0xeac <delay+0x1c>
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	08 95       	ret

00000f08 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f08:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f0a:	84 b5       	in	r24, 0x24	; 36
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f10:	84 b5       	in	r24, 0x24	; 36
     f12:	81 60       	ori	r24, 0x01	; 1
     f14:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f16:	85 b5       	in	r24, 0x25	; 37
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f1c:	85 b5       	in	r24, 0x25	; 37
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f22:	ee e6       	ldi	r30, 0x6E	; 110
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f2c:	e1 e8       	ldi	r30, 0x81	; 129
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f32:	80 81       	ld	r24, Z
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f38:	80 81       	ld	r24, Z
     f3a:	81 60       	ori	r24, 0x01	; 1
     f3c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f3e:	e0 e8       	ldi	r30, 0x80	; 128
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     f48:	e1 e9       	ldi	r30, 0x91	; 145
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     f52:	80 81       	ld	r24, Z
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     f58:	e0 e9       	ldi	r30, 0x90	; 144
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
     f62:	e1 ec       	ldi	r30, 0xC1	; 193
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
     f78:	e3 ec       	ldi	r30, 0xC3	; 195
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
     f82:	e0 ec       	ldi	r30, 0xC0	; 192
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
     f8c:	e2 ec       	ldi	r30, 0xC2	; 194
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	81 60       	ori	r24, 0x01	; 1
     f94:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f96:	ea e7       	ldi	r30, 0x7A	; 122
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     fa6:	80 81       	ld	r24, Z
     fa8:	81 60       	ori	r24, 0x01	; 1
     faa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	80 83       	st	Z, r24
     fb2:	08 95       	ret

00000fb4 <_ZN5Print17availableForWriteEv>:
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;	
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;	
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	08 95       	ret

00000fba <_ZN5Print5flushEv>:
     fba:	08 95       	ret

00000fbc <_ZN9Keyboard_5writeEPKhj>:
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	6c 01       	movw	r12, r24
     fce:	eb 01       	movw	r28, r22
     fd0:	7b 01       	movw	r14, r22
     fd2:	e4 0e       	add	r14, r20
     fd4:	f5 1e       	adc	r15, r21
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	10 e0       	ldi	r17, 0x00	; 0
     fda:	ce 15       	cp	r28, r14
     fdc:	df 05       	cpc	r29, r15
     fde:	81 f0       	breq	.+32     	; 0x1000 <_ZN9Keyboard_5writeEPKhj+0x44>
     fe0:	69 91       	ld	r22, Y+
     fe2:	6d 30       	cpi	r22, 0x0D	; 13
     fe4:	d1 f3       	breq	.-12     	; 0xfda <_ZN9Keyboard_5writeEPKhj+0x1e>
     fe6:	d6 01       	movw	r26, r12
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	01 90       	ld	r0, Z+
     fee:	f0 81       	ld	r31, Z
     ff0:	e0 2d       	mov	r30, r0
     ff2:	c6 01       	movw	r24, r12
     ff4:	09 95       	icall
     ff6:	89 2b       	or	r24, r25
     ff8:	19 f0       	breq	.+6      	; 0x1000 <_ZN9Keyboard_5writeEPKhj+0x44>
     ffa:	0f 5f       	subi	r16, 0xFF	; 255
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	ed cf       	rjmp	.-38     	; 0xfda <_ZN9Keyboard_5writeEPKhj+0x1e>
    1000:	c8 01       	movw	r24, r16
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	08 95       	ret

00001014 <_ZN9Keyboard_C1Ev>:
    1014:	fc 01       	movw	r30, r24
    1016:	13 82       	std	Z+3, r1	; 0x03
    1018:	12 82       	std	Z+2, r1	; 0x02
    101a:	27 e1       	ldi	r18, 0x17	; 23
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	31 83       	std	Z+1, r19	; 0x01
    1020:	20 83       	st	Z, r18
    1022:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZGVZN9Keyboard_C4EvE4node>
    1026:	81 11       	cpse	r24, r1
    1028:	13 c0       	rjmp	.+38     	; 0x1050 <_ZN9Keyboard_C1Ev+0x3c>
    102a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_ZZN9Keyboard_C4EvE4node+0x1>
    102e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_ZZN9Keyboard_C4EvE4node>
    1032:	8f e5       	ldi	r24, 0x5F	; 95
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <_ZZN9Keyboard_C4EvE4node+0x3>
    103a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZZN9Keyboard_C4EvE4node+0x2>
    103e:	8f e2       	ldi	r24, 0x2F	; 47
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <_ZZN9Keyboard_C4EvE4node+0x5>
    1046:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <_ZZN9Keyboard_C4EvE4node+0x4>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_ZGVZN9Keyboard_C4EvE4node>
    1050:	0e 94 39 0c 	call	0x1872	; 0x1872 <_Z3HIDv>
    1054:	61 e5       	ldi	r22, 0x51	; 81
    1056:	71 e0       	ldi	r23, 0x01	; 1
    1058:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor>

0000105c <_ZN9Keyboard_5beginEv>:
    105c:	08 95       	ret

0000105e <_ZN9Keyboard_10sendReportEP9KeyReport>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	eb 01       	movw	r28, r22
    1064:	0e 94 39 0c 	call	0x1872	; 0x1872 <_Z3HIDv>
    1068:	28 e0       	ldi	r18, 0x08	; 8
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	ae 01       	movw	r20, r28
    106e:	62 e0       	ldi	r22, 0x02	; 2
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_ZN4HID_10SendReportEhPKvi>

00001078 <_ZN9Keyboard_5pressEh>:
    1078:	dc 01       	movw	r26, r24
    107a:	68 38       	cpi	r22, 0x88	; 136
    107c:	10 f0       	brcs	.+4      	; 0x1082 <_ZN9Keyboard_5pressEh+0xa>
    107e:	68 58       	subi	r22, 0x88	; 136
    1080:	2d c0       	rjmp	.+90     	; 0x10dc <_ZN9Keyboard_5pressEh+0x64>
    1082:	e6 2f       	mov	r30, r22
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	67 ff       	sbrs	r22, 7
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <_ZN9Keyboard_5pressEh+0x34>
    108a:	e0 58       	subi	r30, 0x80	; 128
    108c:	f1 09       	sbc	r31, r1
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <_ZN9Keyboard_5pressEh+0x1e>
    1094:	88 0f       	add	r24, r24
    1096:	ea 95       	dec	r30
    1098:	ea f7       	brpl	.-6      	; 0x1094 <_ZN9Keyboard_5pressEh+0x1c>
    109a:	14 96       	adiw	r26, 0x04	; 4
    109c:	9c 91       	ld	r25, X
    109e:	14 97       	sbiw	r26, 0x04	; 4
    10a0:	89 2b       	or	r24, r25
    10a2:	14 96       	adiw	r26, 0x04	; 4
    10a4:	8c 93       	st	X, r24
    10a6:	14 97       	sbiw	r26, 0x04	; 4
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	18 c0       	rjmp	.+48     	; 0x10dc <_ZN9Keyboard_5pressEh+0x64>
    10ac:	e1 52       	subi	r30, 0x21	; 33
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	64 91       	lpm	r22, Z
    10b2:	61 11       	cpse	r22, r1
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <_ZN9Keyboard_5pressEh+0x50>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	13 96       	adiw	r26, 0x03	; 3
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
    10c0:	12 97       	sbiw	r26, 0x02	; 2
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	08 95       	ret
    10c8:	67 ff       	sbrs	r22, 7
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <_ZN9Keyboard_5pressEh+0x64>
    10cc:	14 96       	adiw	r26, 0x04	; 4
    10ce:	8c 91       	ld	r24, X
    10d0:	14 97       	sbiw	r26, 0x04	; 4
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	14 96       	adiw	r26, 0x04	; 4
    10d6:	8c 93       	st	X, r24
    10d8:	14 97       	sbiw	r26, 0x04	; 4
    10da:	6f 77       	andi	r22, 0x7F	; 127
    10dc:	16 96       	adiw	r26, 0x06	; 6
    10de:	8c 91       	ld	r24, X
    10e0:	16 97       	sbiw	r26, 0x06	; 6
    10e2:	68 17       	cp	r22, r24
    10e4:	51 f1       	breq	.+84     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    10e6:	17 96       	adiw	r26, 0x07	; 7
    10e8:	8c 91       	ld	r24, X
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	68 17       	cp	r22, r24
    10ee:	29 f1       	breq	.+74     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    10f0:	18 96       	adiw	r26, 0x08	; 8
    10f2:	8c 91       	ld	r24, X
    10f4:	18 97       	sbiw	r26, 0x08	; 8
    10f6:	68 17       	cp	r22, r24
    10f8:	01 f1       	breq	.+64     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    10fa:	19 96       	adiw	r26, 0x09	; 9
    10fc:	8c 91       	ld	r24, X
    10fe:	19 97       	sbiw	r26, 0x09	; 9
    1100:	68 17       	cp	r22, r24
    1102:	d9 f0       	breq	.+54     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    1104:	1a 96       	adiw	r26, 0x0a	; 10
    1106:	8c 91       	ld	r24, X
    1108:	1a 97       	sbiw	r26, 0x0a	; 10
    110a:	68 17       	cp	r22, r24
    110c:	b1 f0       	breq	.+44     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    110e:	1b 96       	adiw	r26, 0x0b	; 11
    1110:	8c 91       	ld	r24, X
    1112:	1b 97       	sbiw	r26, 0x0b	; 11
    1114:	68 17       	cp	r22, r24
    1116:	89 f0       	breq	.+34     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    1118:	fd 01       	movw	r30, r26
    111a:	36 96       	adiw	r30, 0x06	; 6
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	21 91       	ld	r18, Z+
    1122:	21 11       	cpse	r18, r1
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <_ZN9Keyboard_5pressEh+0xb8>
    1126:	fd 01       	movw	r30, r26
    1128:	e8 0f       	add	r30, r24
    112a:	f9 1f       	adc	r31, r25
    112c:	66 83       	std	Z+6, r22	; 0x06
    112e:	05 c0       	rjmp	.+10     	; 0x113a <_ZN9Keyboard_5pressEh+0xc2>
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	86 30       	cpi	r24, 0x06	; 6
    1134:	91 05       	cpc	r25, r1
    1136:	a1 f7       	brne	.-24     	; 0x1120 <_ZN9Keyboard_5pressEh+0xa8>
    1138:	be cf       	rjmp	.-132    	; 0x10b6 <_ZN9Keyboard_5pressEh+0x3e>
    113a:	cd 01       	movw	r24, r26
    113c:	bd 01       	movw	r22, r26
    113e:	6c 5f       	subi	r22, 0xFC	; 252
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN9Keyboard_10sendReportEP9KeyReport>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	08 95       	ret

0000114c <_ZN9Keyboard_7releaseEh>:
    114c:	dc 01       	movw	r26, r24
    114e:	68 38       	cpi	r22, 0x88	; 136
    1150:	10 f0       	brcs	.+4      	; 0x1156 <_ZN9Keyboard_7releaseEh+0xa>
    1152:	68 58       	subi	r22, 0x88	; 136
    1154:	25 c0       	rjmp	.+74     	; 0x11a0 <_ZN9Keyboard_7releaseEh+0x54>
    1156:	e6 2f       	mov	r30, r22
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	67 ff       	sbrs	r22, 7
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <_ZN9Keyboard_7releaseEh+0x36>
    115e:	e0 58       	subi	r30, 0x80	; 128
    1160:	f1 09       	sbc	r31, r1
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	01 c0       	rjmp	.+2      	; 0x116a <_ZN9Keyboard_7releaseEh+0x1e>
    1168:	88 0f       	add	r24, r24
    116a:	ea 95       	dec	r30
    116c:	ea f7       	brpl	.-6      	; 0x1168 <_ZN9Keyboard_7releaseEh+0x1c>
    116e:	80 95       	com	r24
    1170:	14 96       	adiw	r26, 0x04	; 4
    1172:	9c 91       	ld	r25, X
    1174:	14 97       	sbiw	r26, 0x04	; 4
    1176:	89 23       	and	r24, r25
    1178:	14 96       	adiw	r26, 0x04	; 4
    117a:	8c 93       	st	X, r24
    117c:	14 97       	sbiw	r26, 0x04	; 4
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <_ZN9Keyboard_7releaseEh+0x54>
    1182:	e1 52       	subi	r30, 0x21	; 33
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	64 91       	lpm	r22, Z
    1188:	66 23       	and	r22, r22
    118a:	f9 f0       	breq	.+62     	; 0x11ca <_ZN9Keyboard_7releaseEh+0x7e>
    118c:	67 ff       	sbrs	r22, 7
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <_ZN9Keyboard_7releaseEh+0x54>
    1190:	14 96       	adiw	r26, 0x04	; 4
    1192:	8c 91       	ld	r24, X
    1194:	14 97       	sbiw	r26, 0x04	; 4
    1196:	8d 7f       	andi	r24, 0xFD	; 253
    1198:	14 96       	adiw	r26, 0x04	; 4
    119a:	8c 93       	st	X, r24
    119c:	14 97       	sbiw	r26, 0x04	; 4
    119e:	6f 77       	andi	r22, 0x7F	; 127
    11a0:	fd 01       	movw	r30, r26
    11a2:	86 e0       	ldi	r24, 0x06	; 6
    11a4:	66 23       	and	r22, r22
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <_ZN9Keyboard_7releaseEh+0x64>
    11a8:	96 81       	ldd	r25, Z+6	; 0x06
    11aa:	69 13       	cpse	r22, r25
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <_ZN9Keyboard_7releaseEh+0x64>
    11ae:	16 82       	std	Z+6, r1	; 0x06
    11b0:	81 50       	subi	r24, 0x01	; 1
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	81 11       	cpse	r24, r1
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <_ZN9Keyboard_7releaseEh+0x58>
    11b8:	cd 01       	movw	r24, r26
    11ba:	bd 01       	movw	r22, r26
    11bc:	6c 5f       	subi	r22, 0xFC	; 252
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN9Keyboard_10sendReportEP9KeyReport>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	08 95       	ret
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	08 95       	ret

000011d0 <_ZN9Keyboard_5writeEh>:
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
    11dc:	16 2f       	mov	r17, r22
    11de:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN9Keyboard_5pressEh>
    11e2:	7c 01       	movw	r14, r24
    11e4:	61 2f       	mov	r22, r17
    11e6:	ce 01       	movw	r24, r28
    11e8:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN9Keyboard_7releaseEh>
    11ec:	c7 01       	movw	r24, r14
    11ee:	99 27       	eor	r25, r25
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	08 95       	ret

000011fc <_GLOBAL__sub_I__ZN9Keyboard_C2Ev>:
		buffer++;
	}
	return n;
}

Keyboard_ Keyboard;
    11fc:	87 e5       	ldi	r24, 0x57	; 87
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <_ZN9Keyboard_C1Ev>

00001204 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	1f 92       	push	r1
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	69 83       	std	Y+1, r22	; 0x01
    1210:	dc 01       	movw	r26, r24
    1212:	ed 91       	ld	r30, X+
    1214:	fc 91       	ld	r31, X
    1216:	02 80       	ldd	r0, Z+2	; 0x02
    1218:	f3 81       	ldd	r31, Z+3	; 0x03
    121a:	e0 2d       	mov	r30, r0
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	be 01       	movw	r22, r28
    1222:	6f 5f       	subi	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	09 95       	icall
    1228:	0f 90       	pop	r0
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <_ZN7Serial_4peekEv>:
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
    1236:	8c 85       	ldd	r24, Y+12	; 0x0c
    1238:	9d 85       	ldd	r25, Y+13	; 0x0d
    123a:	97 ff       	sbrs	r25, 7
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <_ZN7Serial_4peekEv+0x18>
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 9a 03 	call	0x734	; 0x734 <_Z8USB_Recvh>
    1244:	9d 87       	std	Y+13, r25	; 0x0d
    1246:	8c 87       	std	Y+12, r24	; 0x0c
    1248:	8c 85       	ldd	r24, Y+12	; 0x0c
    124a:	9d 85       	ldd	r25, Y+13	; 0x0d
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <_ZN7Serial_17availableForWriteEv>:
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	0e 94 b1 03 	call	0x762	; 0x762 <_Z13USB_SendSpaceh>
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	08 95       	ret

0000125c <_ZN7Serial_5flushEv>:
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_Z9USB_Flushh>

00001262 <_ZN7Serial_9availableEv>:
    1262:	fc 01       	movw	r30, r24
    1264:	84 85       	ldd	r24, Z+12	; 0x0c
    1266:	95 85       	ldd	r25, Z+13	; 0x0d
    1268:	97 fd       	sbrc	r25, 7
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <_ZN7Serial_9availableEv+0x16>
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	0e 94 45 03 	call	0x68a	; 0x68a <_Z13USB_Availableh>
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	08 95       	ret
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	0e 94 45 03 	call	0x68a	; 0x68a <_Z13USB_Availableh>
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	08 95       	ret

00001282 <_ZN7Serial_4readEv>:
    1282:	fc 01       	movw	r30, r24
    1284:	84 85       	ldd	r24, Z+12	; 0x0c
    1286:	95 85       	ldd	r25, Z+13	; 0x0d
    1288:	97 fd       	sbrc	r25, 7
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <_ZN7Serial_4readEv+0x14>
    128c:	2f ef       	ldi	r18, 0xFF	; 255
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	35 87       	std	Z+13, r19	; 0x0d
    1292:	24 87       	std	Z+12, r18	; 0x0c
    1294:	08 95       	ret
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	0c 94 9a 03 	jmp	0x734	; 0x734 <_Z8USB_Recvh>

0000129c <_ZN7Serial_5writeEPKhj>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    12a6:	88 23       	and	r24, r24
    12a8:	31 f0       	breq	.+12     	; 0x12b6 <_ZN7Serial_5writeEPKhj+0x1a>
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8USB_SendhPKvi>
    12b0:	18 16       	cp	r1, r24
    12b2:	19 06       	cpc	r1, r25
    12b4:	34 f0       	brlt	.+12     	; 0x12c2 <_ZN7Serial_5writeEPKhj+0x26>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9b 83       	std	Y+3, r25	; 0x03
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <_Z16isLUFAbootloaderv>:
    12c8:	ee ef       	ldi	r30, 0xFE	; 254
    12ca:	ff e7       	ldi	r31, 0x7F	; 127
    12cc:	25 91       	lpm	r18, Z+
    12ce:	34 91       	lpm	r19, Z
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	2b 3f       	cpi	r18, 0xFB	; 251
    12d4:	3c 4d       	sbci	r19, 0xDC	; 220
    12d6:	09 f0       	breq	.+2      	; 0x12da <_Z16isLUFAbootloaderv+0x12>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret

000012dc <_Z16CDC_GetInterfacePh>:
    12dc:	fc 01       	movw	r30, r24
    12de:	90 81       	ld	r25, Z
    12e0:	9e 5f       	subi	r25, 0xFE	; 254
    12e2:	90 83       	st	Z, r25
    12e4:	42 e4       	ldi	r20, 0x42	; 66
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	6e e8       	ldi	r22, 0x8E	; 142
    12ea:	71 e0       	ldi	r23, 0x01	; 1
    12ec:	80 e8       	ldi	r24, 0x80	; 128
    12ee:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>

000012f2 <_Z9CDC_SetupR8USBSetup>:
    12f2:	fc 01       	movw	r30, r24
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	90 81       	ld	r25, Z
    12f8:	91 3a       	cpi	r25, 0xA1	; 161
    12fa:	59 f4       	brne	.+22     	; 0x1312 <_Z9CDC_SetupR8USBSetup+0x20>
    12fc:	81 32       	cpi	r24, 0x21	; 33
    12fe:	09 f0       	breq	.+2      	; 0x1302 <_Z9CDC_SetupR8USBSetup+0x10>
    1300:	65 c0       	rjmp	.+202    	; 0x13cc <_Z9CDC_SetupR8USBSetup+0xda>
    1302:	47 e0       	ldi	r20, 0x07	; 7
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	6b e0       	ldi	r22, 0x0B	; 11
    1308:	71 e0       	ldi	r23, 0x01	; 1
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>
    1310:	5b c0       	rjmp	.+182    	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    1312:	91 32       	cpi	r25, 0x21	; 33
    1314:	09 f0       	breq	.+2      	; 0x1318 <_Z9CDC_SetupR8USBSetup+0x26>
    1316:	5a c0       	rjmp	.+180    	; 0x13cc <_Z9CDC_SetupR8USBSetup+0xda>
    1318:	83 32       	cpi	r24, 0x23	; 35
    131a:	69 f4       	brne	.+26     	; 0x1336 <_Z9CDC_SetupR8USBSetup+0x44>
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL10breakValue>
    1328:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_ZL10breakValue+0x1>
    132c:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_ZL10breakValue+0x2>
    1330:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_ZL10breakValue+0x3>
    1334:	49 c0       	rjmp	.+146    	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	39 f4       	brne	.+14     	; 0x1348 <_Z9CDC_SetupR8USBSetup+0x56>
    133a:	67 e0       	ldi	r22, 0x07	; 7
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	8b e0       	ldi	r24, 0x0B	; 11
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 a2 04 	call	0x944	; 0x944 <_Z15USB_RecvControlPvi>
    1346:	40 c0       	rjmp	.+128    	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    1348:	82 32       	cpi	r24, 0x22	; 34
    134a:	09 f0       	breq	.+2      	; 0x134e <_Z9CDC_SetupR8USBSetup+0x5c>
    134c:	3d c0       	rjmp	.+122    	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL12_usbLineInfo+0x7>
    1354:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z16isLUFAbootloaderv>
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <_Z9CDC_SetupR8USBSetup+0x70>
    135c:	ee ef       	ldi	r30, 0xFE	; 254
    135e:	fa e0       	ldi	r31, 0x0A	; 10
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <_Z9CDC_SetupR8USBSetup+0x74>
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f8 e0       	ldi	r31, 0x08	; 8
    1366:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo>
    136a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZL12_usbLineInfo+0x1>
    136e:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZL12_usbLineInfo+0x2>
    1372:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZL12_usbLineInfo+0x3>
    1376:	80 3b       	cpi	r24, 0xB0	; 176
    1378:	94 40       	sbci	r25, 0x04	; 4
    137a:	a1 05       	cpc	r26, r1
    137c:	b1 05       	cpc	r27, r1
    137e:	41 f5       	brne	.+80     	; 0x13d0 <_Z9CDC_SetupR8USBSetup+0xde>
    1380:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    1384:	80 fd       	sbrc	r24, 0
    1386:	24 c0       	rjmp	.+72     	; 0x13d0 <_Z9CDC_SetupR8USBSetup+0xde>
    1388:	ee 3f       	cpi	r30, 0xFE	; 254
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	f8 07       	cpc	r31, r24
    138e:	51 f0       	breq	.+20     	; 0x13a4 <_Z9CDC_SetupR8USBSetup+0xb2>
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	87 37       	cpi	r24, 0x77	; 119
    1396:	27 e7       	ldi	r18, 0x77	; 119
    1398:	92 07       	cpc	r25, r18
    139a:	21 f0       	breq	.+8      	; 0x13a4 <_Z9CDC_SetupR8USBSetup+0xb2>
    139c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x91e>
    13a0:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x91d>
    13a4:	87 e7       	ldi	r24, 0x77	; 119
    13a6:	97 e7       	ldi	r25, 0x77	; 119
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13b0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <_ZL11wdtcsr_save>
    13b4:	9b e0       	ldi	r25, 0x0B	; 11
    13b6:	88 e1       	ldi	r24, 0x18	; 24
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	a8 95       	wdr
    13be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	08 95       	ret
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	87 37       	cpi	r24, 0x77	; 119
    13d6:	97 47       	sbci	r25, 0x77	; 119
    13d8:	b9 f7       	brne	.-18     	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    13da:	a8 95       	wdr
    13dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13e0:	88 61       	ori	r24, 0x18	; 24
    13e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13e6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_ZL11wdtcsr_save>
    13ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    13ee:	ee 3f       	cpi	r30, 0xFE	; 254
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	f8 07       	cpc	r31, r24
    13f4:	39 f0       	breq	.+14     	; 0x1404 <_Z9CDC_SetupR8USBSetup+0x112>
    13f6:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x91d>
    13fa:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x91e>
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
    1402:	e2 cf       	rjmp	.-60     	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>
    1404:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x91e>
    1408:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x91d>
    140c:	dd cf       	rjmp	.-70     	; 0x13c8 <_Z9CDC_SetupR8USBSetup+0xd6>

0000140e <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    140e:	eb e6       	ldi	r30, 0x6B	; 107
    1410:	f1 e0       	ldi	r31, 0x01	; 1
    1412:	13 82       	std	Z+3, r1	; 0x03
    1414:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1416:	88 ee       	ldi	r24, 0xE8	; 232
    1418:	93 e0       	ldi	r25, 0x03	; 3
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	84 83       	std	Z+4, r24	; 0x04
    1420:	95 83       	std	Z+5, r25	; 0x05
    1422:	a6 83       	std	Z+6, r26	; 0x06
    1424:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    1426:	83 e2       	ldi	r24, 0x23	; 35
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	95 87       	std	Z+13, r25	; 0x0d
    1434:	84 87       	std	Z+12, r24	; 0x0c
    1436:	08 95       	ret

00001438 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1438:	08 95       	ret

0000143a <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	7b 01       	movw	r14, r22
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1448:	fc 01       	movw	r30, r24
    144a:	c2 81       	ldd	r28, Z+2	; 0x02
    144c:	d3 81       	ldd	r29, Z+3	; 0x03

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1452:	20 97       	sbiw	r28, 0x00	; 0
    1454:	81 f0       	breq	.+32     	; 0x1476 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
		int res = node->getInterface(interfaceCount);
    1456:	e8 81       	ld	r30, Y
    1458:	f9 81       	ldd	r31, Y+1	; 0x01
    145a:	02 80       	ldd	r0, Z+2	; 0x02
    145c:	f3 81       	ldd	r31, Z+3	; 0x03
    145e:	e0 2d       	mov	r30, r0
    1460:	b7 01       	movw	r22, r14
    1462:	ce 01       	movw	r24, r28
    1464:	09 95       	icall
		if (res < 0)
    1466:	97 fd       	sbrc	r25, 7
    1468:	08 c0       	rjmp	.+16     	; 0x147a <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
			return -1;
		sent += res;
    146a:	08 0f       	add	r16, r24
    146c:	19 1f       	adc	r17, r25

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    146e:	08 84       	ldd	r0, Y+8	; 0x08
    1470:	d9 85       	ldd	r29, Y+9	; 0x09
    1472:	c0 2d       	mov	r28, r0
    1474:	ee cf       	rjmp	.-36     	; 0x1452 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    1476:	c8 01       	movw	r24, r16
    1478:	02 c0       	rjmp	.+4      	; 0x147e <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
		sent += res;
	}
	return sent;
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	08 95       	ret

0000148c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1496:	fc 01       	movw	r30, r24
    1498:	c2 81       	ldd	r28, Z+2	; 0x02
    149a:	d3 81       	ldd	r29, Z+3	; 0x03
    149c:	20 97       	sbiw	r28, 0x00	; 0
    149e:	71 f0       	breq	.+28     	; 0x14bc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
		int ret = node->getDescriptor(setup);
    14a0:	e8 81       	ld	r30, Y
    14a2:	f9 81       	ldd	r31, Y+1	; 0x01
    14a4:	04 80       	ldd	r0, Z+4	; 0x04
    14a6:	f5 81       	ldd	r31, Z+5	; 0x05
    14a8:	e0 2d       	mov	r30, r0
    14aa:	b8 01       	movw	r22, r16
    14ac:	ce 01       	movw	r24, r28
    14ae:	09 95       	icall
		// ret!=0 -> request has been processed
		if (ret)
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    14b4:	08 84       	ldd	r0, Y+8	; 0x08
    14b6:	d9 85       	ldd	r29, Y+9	; 0x09
    14b8:	c0 2d       	mov	r28, r0
    14ba:	f0 cf       	rjmp	.-32     	; 0x149c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    14d4:	fc 01       	movw	r30, r24
    14d6:	c2 81       	ldd	r28, Z+2	; 0x02
    14d8:	d3 81       	ldd	r29, Z+3	; 0x03
    14da:	20 97       	sbiw	r28, 0x00	; 0
    14dc:	71 f0       	breq	.+28     	; 0x14fa <_ZN13PluggableUSB_12getShortNameEPc+0x30>
		iSerialNum += node->getShortName(iSerialNum);
    14de:	e8 81       	ld	r30, Y
    14e0:	f9 81       	ldd	r31, Y+1	; 0x01
    14e2:	06 80       	ldd	r0, Z+6	; 0x06
    14e4:	f7 81       	ldd	r31, Z+7	; 0x07
    14e6:	e0 2d       	mov	r30, r0
    14e8:	b8 01       	movw	r22, r16
    14ea:	ce 01       	movw	r24, r28
    14ec:	09 95       	icall
    14ee:	08 0f       	add	r16, r24
    14f0:	11 1d       	adc	r17, r1
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    14f2:	08 84       	ldd	r0, Y+8	; 0x08
    14f4:	d9 85       	ldd	r29, Y+9	; 0x09
    14f6:	c0 2d       	mov	r28, r0
    14f8:	f0 cf       	rjmp	.-32     	; 0x14da <_ZN13PluggableUSB_12getShortNameEPc+0x10>
		iSerialNum += node->getShortName(iSerialNum);
	}
	*iSerialNum = 0;
    14fa:	f8 01       	movw	r30, r16
    14fc:	10 82       	st	Z, r1
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1512:	fc 01       	movw	r30, r24
    1514:	c2 81       	ldd	r28, Z+2	; 0x02
    1516:	d3 81       	ldd	r29, Z+3	; 0x03
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	71 f0       	breq	.+28     	; 0x1538 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
		if (node->setup(setup)) {
    151c:	e8 81       	ld	r30, Y
    151e:	f9 81       	ldd	r31, Y+1	; 0x01
    1520:	01 90       	ld	r0, Z+
    1522:	f0 81       	ld	r31, Z
    1524:	e0 2d       	mov	r30, r0
    1526:	b8 01       	movw	r22, r16
    1528:	ce 01       	movw	r24, r28
    152a:	09 95       	icall
    152c:	81 11       	cpse	r24, r1
    152e:	05 c0       	rjmp	.+10     	; 0x153a <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1530:	08 84       	ldd	r0, Y+8	; 0x08
    1532:	d9 85       	ldd	r29, Y+9	; 0x09
    1534:	c0 2d       	mov	r28, r0
    1536:	f0 cf       	rjmp	.-32     	; 0x1518 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    1538:	80 e0       	ldi	r24, 0x00	; 0
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret

00001544 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	fc 01       	movw	r30, r24
    154a:	db 01       	movw	r26, r22
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    154c:	21 81       	ldd	r18, Z+1	; 0x01
    154e:	14 96       	adiw	r26, 0x04	; 4
    1550:	8c 91       	ld	r24, X
    1552:	14 97       	sbiw	r26, 0x04	; 4
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	82 0f       	add	r24, r18
    1558:	91 1d       	adc	r25, r1
    155a:	08 97       	sbiw	r24, 0x08	; 8
    155c:	a4 f5       	brge	.+104    	; 0x15c6 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x82>
		return false;
	}

	if (!rootNode) {
    155e:	c2 81       	ldd	r28, Z+2	; 0x02
    1560:	d3 81       	ldd	r29, Z+3	; 0x03
    1562:	20 97       	sbiw	r28, 0x00	; 0
    1564:	19 f4       	brne	.+6      	; 0x156c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
		rootNode = node;
    1566:	73 83       	std	Z+3, r23	; 0x03
    1568:	62 83       	std	Z+2, r22	; 0x02
    156a:	08 c0       	rjmp	.+16     	; 0x157c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x38>
	} else {
		PluggableUSBModule *current = rootNode;
		while (current->next) {
    156c:	88 85       	ldd	r24, Y+8	; 0x08
    156e:	99 85       	ldd	r25, Y+9	; 0x09
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	11 f0       	breq	.+4      	; 0x1578 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x34>
    1574:	ec 01       	movw	r28, r24
    1576:	fa cf       	rjmp	.-12     	; 0x156c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
			current = current->next;
		}
		current->next = node;
    1578:	b9 87       	std	Y+9, r27	; 0x09
    157a:	a8 87       	std	Y+8, r26	; 0x08
	}

	node->pluggedInterface = lastIf;
    157c:	80 81       	ld	r24, Z
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	8c 93       	st	X, r24
    1582:	12 97       	sbiw	r26, 0x02	; 2
	node->pluggedEndpoint = lastEp;
    1584:	81 81       	ldd	r24, Z+1	; 0x01
    1586:	13 96       	adiw	r26, 0x03	; 3
    1588:	8c 93       	st	X, r24
    158a:	13 97       	sbiw	r26, 0x03	; 3
	lastIf += node->numInterfaces;
    158c:	90 81       	ld	r25, Z
    158e:	15 96       	adiw	r26, 0x05	; 5
    1590:	8c 91       	ld	r24, X
    1592:	15 97       	sbiw	r26, 0x05	; 5
    1594:	89 0f       	add	r24, r25
    1596:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	14 96       	adiw	r26, 0x04	; 4
    159c:	9c 91       	ld	r25, X
    159e:	14 97       	sbiw	r26, 0x04	; 4
    15a0:	89 17       	cp	r24, r25
    15a2:	98 f4       	brcc	.+38     	; 0x15ca <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x86>
		_initEndpoints[lastEp] = node->endpointType[i];
    15a4:	16 96       	adiw	r26, 0x06	; 6
    15a6:	cd 91       	ld	r28, X+
    15a8:	dc 91       	ld	r29, X
    15aa:	17 97       	sbiw	r26, 0x07	; 7
    15ac:	c8 0f       	add	r28, r24
    15ae:	d1 1d       	adc	r29, r1
    15b0:	98 81       	ld	r25, Y
    15b2:	c1 81       	ldd	r28, Z+1	; 0x01
    15b4:	d0 e0       	ldi	r29, 0x00	; 0
    15b6:	c0 50       	subi	r28, 0x00	; 0
    15b8:	df 4f       	sbci	r29, 0xFF	; 255
    15ba:	98 83       	st	Y, r25
		lastEp++;
    15bc:	91 81       	ldd	r25, Z+1	; 0x01
    15be:	9f 5f       	subi	r25, 0xFF	; 255
    15c0:	91 83       	std	Z+1, r25	; 0x01
	}

	node->pluggedInterface = lastIf;
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	ea cf       	rjmp	.-44     	; 0x159a <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x56>
}

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
		return false;
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x88>
	lastIf += node->numInterfaces;
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
	// restart USB layer???
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    15d2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_ZGVZ12PluggableUSBvE3obj>
    15d6:	81 11       	cpse	r24, r1
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZZ12PluggableUSBvE3obj>
    15e0:	84 e0       	ldi	r24, 0x04	; 4
    15e2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <_ZZ12PluggableUSBvE3obj+0x1>
    15e6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_ZZ12PluggableUSBvE3obj+0x3>
    15ea:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    15f4:	8c eb       	ldi	r24, 0xBC	; 188
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	08 95       	ret

000015fa <_ZN4HID_12getShortNameEPc>:
	
	return total;
}

uint8_t HID_::getShortName(char *name)
{
    15fa:	dc 01       	movw	r26, r24
    15fc:	fb 01       	movw	r30, r22
	name[0] = 'H';
    15fe:	88 e4       	ldi	r24, 0x48	; 72
    1600:	80 83       	st	Z, r24
	name[1] = 'I';
    1602:	89 e4       	ldi	r24, 0x49	; 73
    1604:	81 83       	std	Z+1, r24	; 0x01
	name[2] = 'D';
    1606:	84 e4       	ldi	r24, 0x44	; 68
    1608:	82 83       	std	Z+2, r24	; 0x02
	name[3] = 'A' + (descriptorSize & 0x0F);
    160a:	1d 96       	adiw	r26, 0x0d	; 13
    160c:	9c 91       	ld	r25, X
    160e:	1d 97       	sbiw	r26, 0x0d	; 13
    1610:	9f 70       	andi	r25, 0x0F	; 15
    1612:	9f 5b       	subi	r25, 0xBF	; 191
    1614:	93 83       	std	Z+3, r25	; 0x03
	name[4] = 'A' + ((descriptorSize >> 4) & 0x0F);
    1616:	1d 96       	adiw	r26, 0x0d	; 13
    1618:	8d 91       	ld	r24, X+
    161a:	9c 91       	ld	r25, X
    161c:	1e 97       	sbiw	r26, 0x0e	; 14
    161e:	24 e0       	ldi	r18, 0x04	; 4
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	2a 95       	dec	r18
    1626:	e1 f7       	brne	.-8      	; 0x1620 <_ZN4HID_12getShortNameEPc+0x26>
    1628:	8f 70       	andi	r24, 0x0F	; 15
    162a:	8f 5b       	subi	r24, 0xBF	; 191
    162c:	84 83       	std	Z+4, r24	; 0x04
	return 5;
}
    162e:	85 e0       	ldi	r24, 0x05	; 5
    1630:	08 95       	ret

00001632 <_ZN4HID_12getInterfaceEPh>:
	static HID_ obj;
	return obj;
}

int HID_::getInterface(uint8_t* interfaceCount)
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	69 97       	sbiw	r28, 0x19	; 25
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	fc 01       	movw	r30, r24
	*interfaceCount += 1; // uses 1
    1648:	db 01       	movw	r26, r22
    164a:	8c 91       	ld	r24, X
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8c 93       	st	X, r24
	HIDDescriptor hidInterface = {
		D_INTERFACE(pluggedInterface, 1, USB_DEVICE_CLASS_HUMAN_INTERFACE, HID_SUBCLASS_NONE, HID_PROTOCOL_NONE),
		D_HIDREPORT(descriptorSize),
		D_ENDPOINT(USB_ENDPOINT_IN(pluggedEndpoint), USB_ENDPOINT_TYPE_INTERRUPT, USB_EP_SIZE, 0x01)
	};
    1650:	be 01       	movw	r22, r28
    1652:	6f 5f       	subi	r22, 0xFF	; 255
    1654:	7f 4f       	sbci	r23, 0xFF	; 255
    1656:	89 e1       	ldi	r24, 0x19	; 25
    1658:	db 01       	movw	r26, r22
    165a:	1d 92       	st	X+, r1
    165c:	8a 95       	dec	r24
    165e:	e9 f7       	brne	.-6      	; 0x165a <_ZN4HID_12getInterfaceEPh+0x28>
    1660:	29 e0       	ldi	r18, 0x09	; 9
    1662:	29 83       	std	Y+1, r18	; 0x01
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	8e 83       	std	Y+6, r24	; 0x06
    1670:	2a 87       	std	Y+10, r18	; 0x0a
    1672:	21 e2       	ldi	r18, 0x21	; 33
    1674:	2b 87       	std	Y+11, r18	; 0x0b
    1676:	9c 87       	std	Y+12, r25	; 0x0c
    1678:	9d 87       	std	Y+13, r25	; 0x0d
    167a:	9f 87       	std	Y+15, r25	; 0x0f
    167c:	22 e2       	ldi	r18, 0x22	; 34
    167e:	28 8b       	std	Y+16, r18	; 0x10
    1680:	27 e0       	ldi	r18, 0x07	; 7
    1682:	2b 8b       	std	Y+19, r18	; 0x13
    1684:	25 e0       	ldi	r18, 0x05	; 5
    1686:	2c 8b       	std	Y+20, r18	; 0x14
    1688:	8e 8b       	std	Y+22, r24	; 0x16
    168a:	20 e4       	ldi	r18, 0x40	; 64
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	38 8f       	std	Y+24, r19	; 0x18
    1690:	2f 8b       	std	Y+23, r18	; 0x17
    1692:	99 8f       	std	Y+25, r25	; 0x19
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	8b 83       	std	Y+3, r24	; 0x03
int HID_::getInterface(uint8_t* interfaceCount)
{
	*interfaceCount += 1; // uses 1
	HIDDescriptor hidInterface = {
		D_INTERFACE(pluggedInterface, 1, USB_DEVICE_CLASS_HUMAN_INTERFACE, HID_SUBCLASS_NONE, HID_PROTOCOL_NONE),
		D_HIDREPORT(descriptorSize),
    1698:	95 85       	ldd	r25, Z+13	; 0x0d
    169a:	86 85       	ldd	r24, Z+14	; 0x0e
		D_ENDPOINT(USB_ENDPOINT_IN(pluggedEndpoint), USB_ENDPOINT_TYPE_INTERRUPT, USB_EP_SIZE, 0x01)
	};
    169c:	99 8b       	std	Y+17, r25	; 0x11
    169e:	8a 8b       	std	Y+18, r24	; 0x12
    16a0:	83 81       	ldd	r24, Z+3	; 0x03
    16a2:	80 68       	ori	r24, 0x80	; 128
    16a4:	8d 8b       	std	Y+21, r24	; 0x15
	return USB_SendControl(0, &hidInterface, sizeof(hidInterface));
    16a6:	49 e1       	ldi	r20, 0x19	; 25
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>
}
    16b0:	69 96       	adiw	r28, 0x19	; 25
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <_ZN4HID_13getDescriptorER8USBSetup>:

int HID_::getDescriptor(USBSetup& setup)
{
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	fb 01       	movw	r30, r22
	// Check if this is a HID Class Descriptor request
	if (setup.bmRequestType != REQUEST_DEVICETOHOST_STANDARD_INTERFACE) { return 0; }
    16d0:	20 81       	ld	r18, Z
    16d2:	21 38       	cpi	r18, 0x81	; 129
    16d4:	51 f5       	brne	.+84     	; 0x172a <_ZN4HID_13getDescriptorER8USBSetup+0x68>
	if (setup.wValueH != HID_REPORT_DESCRIPTOR_TYPE) { return 0; }
    16d6:	23 81       	ldd	r18, Z+3	; 0x03
    16d8:	22 32       	cpi	r18, 0x22	; 34
    16da:	39 f5       	brne	.+78     	; 0x172a <_ZN4HID_13getDescriptorER8USBSetup+0x68>

	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }
    16dc:	dc 01       	movw	r26, r24
    16de:	12 96       	adiw	r26, 0x02	; 2
    16e0:	2c 91       	ld	r18, X
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	44 81       	ldd	r20, Z+4	; 0x04
    16e6:	55 81       	ldd	r21, Z+5	; 0x05
    16e8:	42 17       	cp	r20, r18
    16ea:	53 07       	cpc	r21, r19
    16ec:	f1 f4       	brne	.+60     	; 0x172a <_ZN4HID_13getDescriptorER8USBSetup+0x68>
    16ee:	ec 01       	movw	r28, r24

	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    16f0:	0b 85       	ldd	r16, Y+11	; 0x0b
    16f2:	1c 85       	ldd	r17, Y+12	; 0x0c
	if (setup.wValueH != HID_REPORT_DESCRIPTOR_TYPE) { return 0; }

	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }

	int total = 0;
    16f4:	e1 2c       	mov	r14, r1
    16f6:	f1 2c       	mov	r15, r1
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    16f8:	01 15       	cp	r16, r1
    16fa:	11 05       	cpc	r17, r1
    16fc:	91 f0       	breq	.+36     	; 0x1722 <_ZN4HID_13getDescriptorER8USBSetup+0x60>
		int res = USB_SendControl(TRANSFER_PGM, node->data, node->length);
    16fe:	f8 01       	movw	r30, r16
    1700:	44 81       	ldd	r20, Z+4	; 0x04
    1702:	55 81       	ldd	r21, Z+5	; 0x05
    1704:	62 81       	ldd	r22, Z+2	; 0x02
    1706:	73 81       	ldd	r23, Z+3	; 0x03
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z15USB_SendControlhPKvi>
		if (res == -1)
    170e:	8f 3f       	cpi	r24, 0xFF	; 255
    1710:	ff ef       	ldi	r31, 0xFF	; 255
    1712:	9f 07       	cpc	r25, r31
    1714:	69 f0       	breq	.+26     	; 0x1730 <_ZN4HID_13getDescriptorER8USBSetup+0x6e>
			return -1;
		total += res;
    1716:	e8 0e       	add	r14, r24
    1718:	f9 1e       	adc	r15, r25
	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }

	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    171a:	d8 01       	movw	r26, r16
    171c:	0d 91       	ld	r16, X+
    171e:	1c 91       	ld	r17, X
    1720:	eb cf       	rjmp	.-42     	; 0x16f8 <_ZN4HID_13getDescriptorER8USBSetup+0x36>
		total += res;
	}
	
	// Reset the protocol on reenumeration. Normally the host should not assume the state of the protocol
	// due to the USB specs, but Windows and Linux just assumes its in report mode.
	protocol = HID_REPORT_PROTOCOL;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8f 87       	std	Y+15, r24	; 0x0f
    1726:	c7 01       	movw	r24, r14
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <_ZN4HID_13getDescriptorER8USBSetup+0x72>
}

int HID_::getDescriptor(USBSetup& setup)
{
	// Check if this is a HID Class Descriptor request
	if (setup.bmRequestType != REQUEST_DEVICETOHOST_STANDARD_INTERFACE) { return 0; }
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <_ZN4HID_13getDescriptorER8USBSetup+0x72>
	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
		int res = USB_SendControl(TRANSFER_PGM, node->data, node->length);
		if (res == -1)
			return -1;
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	9f ef       	ldi	r25, 0xFF	; 255
	// Reset the protocol on reenumeration. Normally the host should not assume the state of the protocol
	// due to the USB specs, but Windows and Linux just assumes its in report mode.
	protocol = HID_REPORT_PROTOCOL;
	
	return total;
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	08 95       	ret

00001742 <_ZN4HID_5setupER8USBSetup>:
	if (ret2 < 0) return ret2;
	return ret + ret2;
}

bool HID_::setup(USBSetup& setup)
{
    1742:	dc 01       	movw	r26, r24
    1744:	fb 01       	movw	r30, r22
	if (pluggedInterface != setup.wIndex) {
    1746:	12 96       	adiw	r26, 0x02	; 2
    1748:	8c 91       	ld	r24, X
    174a:	12 97       	sbiw	r26, 0x02	; 2
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	24 81       	ldd	r18, Z+4	; 0x04
    1750:	35 81       	ldd	r19, Z+5	; 0x05
    1752:	82 17       	cp	r24, r18
    1754:	93 07       	cpc	r25, r19
    1756:	d1 f4       	brne	.+52     	; 0x178c <_ZN4HID_5setupER8USBSetup+0x4a>
		return false;
	}

	uint8_t request = setup.bRequest;
    1758:	91 81       	ldd	r25, Z+1	; 0x01
	uint8_t requestType = setup.bmRequestType;
    175a:	80 81       	ld	r24, Z

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    175c:	81 3a       	cpi	r24, 0xA1	; 161
    175e:	31 f4       	brne	.+12     	; 0x176c <_ZN4HID_5setupER8USBSetup+0x2a>
	{
		if (request == HID_GET_REPORT) {
			// TODO: HID_GetReport();
			return true;
    1760:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t request = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
	{
		if (request == HID_GET_REPORT) {
    1762:	91 30       	cpi	r25, 0x01	; 1
    1764:	91 f0       	breq	.+36     	; 0x178a <_ZN4HID_5setupER8USBSetup+0x48>
			// TODO: HID_GetReport();
			return true;
		}
		if (request == HID_GET_PROTOCOL) {
    1766:	93 30       	cpi	r25, 0x03	; 3
    1768:	89 f4       	brne	.+34     	; 0x178c <_ZN4HID_5setupER8USBSetup+0x4a>
    176a:	11 c0       	rjmp	.+34     	; 0x178e <_ZN4HID_5setupER8USBSetup+0x4c>
		if (request == HID_GET_IDLE) {
			// TODO: Send8(idle);
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    176c:	81 32       	cpi	r24, 0x21	; 33
    176e:	71 f4       	brne	.+28     	; 0x178c <_ZN4HID_5setupER8USBSetup+0x4a>
	{
		if (request == HID_SET_PROTOCOL) {
    1770:	9b 30       	cpi	r25, 0x0B	; 11
    1772:	21 f4       	brne	.+8      	; 0x177c <_ZN4HID_5setupER8USBSetup+0x3a>
			// The USB Host tells us if we are in boot or report mode.
			// This only works with a real boot compatible device.
			protocol = setup.wValueL;
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	1f 96       	adiw	r26, 0x0f	; 15
    1778:	8c 93       	st	X, r24
    177a:	05 c0       	rjmp	.+10     	; 0x1786 <_ZN4HID_5setupER8USBSetup+0x44>
			return true;
		}
		if (request == HID_SET_IDLE) {
    177c:	9a 30       	cpi	r25, 0x0A	; 10
    177e:	31 f4       	brne	.+12     	; 0x178c <_ZN4HID_5setupER8USBSetup+0x4a>
			idle = setup.wValueL;
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	50 96       	adiw	r26, 0x10	; 16
    1784:	8c 93       	st	X, r24
			return true;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	08 95       	ret
    178a:	08 95       	ret
}

bool HID_::setup(USBSetup& setup)
{
	if (pluggedInterface != setup.wIndex) {
		return false;
    178c:	80 e0       	ldi	r24, 0x00	; 0
			//USB_RecvControl(data, length);
		}
	}

	return false;
}
    178e:	08 95       	ret

00001790 <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor>:
	name[4] = 'A' + ((descriptorSize >> 4) & 0x0F);
	return 5;
}

void HID_::AppendDescriptor(HIDSubDescriptor *node)
{
    1790:	fc 01       	movw	r30, r24
	if (!rootNode) {
    1792:	a3 85       	ldd	r26, Z+11	; 0x0b
    1794:	b4 85       	ldd	r27, Z+12	; 0x0c
    1796:	10 97       	sbiw	r26, 0x00	; 0
    1798:	19 f4       	brne	.+6      	; 0x17a0 <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x10>
		rootNode = node;
    179a:	74 87       	std	Z+12, r23	; 0x0c
    179c:	63 87       	std	Z+11, r22	; 0x0b
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x22>
	} else {
		HIDSubDescriptor *current = rootNode;
		while (current->next) {
    17a0:	8d 91       	ld	r24, X+
    17a2:	9c 91       	ld	r25, X
    17a4:	11 97       	sbiw	r26, 0x01	; 1
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	11 f0       	breq	.+4      	; 0x17ae <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x1e>
    17aa:	dc 01       	movw	r26, r24
    17ac:	f9 cf       	rjmp	.-14     	; 0x17a0 <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x10>
			current = current->next;
		}
		current->next = node;
    17ae:	6d 93       	st	X+, r22
    17b0:	7c 93       	st	X, r23
	}
	descriptorSize += node->length;
    17b2:	25 85       	ldd	r18, Z+13	; 0x0d
    17b4:	36 85       	ldd	r19, Z+14	; 0x0e
    17b6:	db 01       	movw	r26, r22
    17b8:	14 96       	adiw	r26, 0x04	; 4
    17ba:	8d 91       	ld	r24, X+
    17bc:	9c 91       	ld	r25, X
    17be:	15 97       	sbiw	r26, 0x05	; 5
    17c0:	82 0f       	add	r24, r18
    17c2:	93 1f       	adc	r25, r19
    17c4:	96 87       	std	Z+14, r25	; 0x0e
    17c6:	85 87       	std	Z+13, r24	; 0x0d
    17c8:	08 95       	ret

000017ca <_ZN4HID_10SendReportEhPKvi>:
}

int HID_::SendReport(uint8_t id, const void* data, int len)
{
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	1f 92       	push	r1
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	7c 01       	movw	r14, r24
    17e6:	69 83       	std	Y+1, r22	; 0x01
    17e8:	6a 01       	movw	r12, r20
    17ea:	59 01       	movw	r10, r18
	auto ret = USB_Send(pluggedEndpoint, &id, 1);
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	be 01       	movw	r22, r28
    17f2:	6f 5f       	subi	r22, 0xFF	; 255
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	fc 01       	movw	r30, r24
    17f8:	83 81       	ldd	r24, Z+3	; 0x03
    17fa:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8USB_SendhPKvi>
    17fe:	8c 01       	movw	r16, r24
	if (ret < 0) return ret;
    1800:	97 fd       	sbrc	r25, 7
    1802:	0b c0       	rjmp	.+22     	; 0x181a <_ZN4HID_10SendReportEhPKvi+0x50>
	auto ret2 = USB_Send(pluggedEndpoint | TRANSFER_RELEASE, data, len);
    1804:	f7 01       	movw	r30, r14
    1806:	83 81       	ldd	r24, Z+3	; 0x03
    1808:	a5 01       	movw	r20, r10
    180a:	b6 01       	movw	r22, r12
    180c:	80 64       	ori	r24, 0x40	; 64
    180e:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8USB_SendhPKvi>
	if (ret2 < 0) return ret2;
    1812:	97 fd       	sbrc	r25, 7
    1814:	02 c0       	rjmp	.+4      	; 0x181a <_ZN4HID_10SendReportEhPKvi+0x50>
	return ret + ret2;
    1816:	80 0f       	add	r24, r16
    1818:	91 1f       	adc	r25, r17
}
    181a:	0f 90       	pop	r0
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	08 95       	ret

00001832 <_ZN4HID_C1Ev>:
	}

	return false;
}

HID_::HID_(void) : PluggableUSBModule(1, 1, epType),
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	ec 01       	movw	r28, r24
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint8_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	8c 83       	std	Y+4, r24	; 0x04
    183c:	8d 83       	std	Y+5, r24	; 0x05
                   rootNode(NULL), descriptorSize(0),
                   protocol(HID_REPORT_PROTOCOL), idle(1)
    183e:	9e 01       	movw	r18, r28
    1840:	26 5f       	subi	r18, 0xF6	; 246
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	3f 83       	std	Y+7, r19	; 0x07
    1846:	2e 83       	std	Y+6, r18	; 0x06
    1848:	19 86       	std	Y+9, r1	; 0x09
    184a:	18 86       	std	Y+8, r1	; 0x08
    184c:	25 e3       	ldi	r18, 0x35	; 53
    184e:	31 e0       	ldi	r19, 0x01	; 1
    1850:	39 83       	std	Y+1, r19	; 0x01
    1852:	28 83       	st	Y, r18
    1854:	1c 86       	std	Y+12, r1	; 0x0c
    1856:	1b 86       	std	Y+11, r1	; 0x0b
    1858:	1e 86       	std	Y+14, r1	; 0x0e
    185a:	1d 86       	std	Y+13, r1	; 0x0d
    185c:	8f 87       	std	Y+15, r24	; 0x0f
    185e:	88 8b       	std	Y+16, r24	; 0x10
{
	epType[0] = EP_TYPE_INTERRUPT_IN;
    1860:	81 ec       	ldi	r24, 0xC1	; 193
    1862:	8a 87       	std	Y+10, r24	; 0x0a
	PluggableUSB().plug(this);
    1864:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z12PluggableUSBv>
    1868:	be 01       	movw	r22, r28
}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
HID_::HID_(void) : PluggableUSBModule(1, 1, epType),
                   rootNode(NULL), descriptorSize(0),
                   protocol(HID_REPORT_PROTOCOL), idle(1)
{
	epType[0] = EP_TYPE_INTERRUPT_IN;
	PluggableUSB().plug(this);
    186e:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>

00001872 <_Z3HIDv>:

#if defined(USBCON)

HID_& HID()
{
	static HID_ obj;
    1872:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <_ZGVZ3HIDvE3obj>
    1876:	81 11       	cpse	r24, r1
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <_Z3HIDv+0x16>
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN4HID_C1Ev>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <_ZGVZ3HIDvE3obj>
	return obj;
}
    1888:	88 ec       	ldi	r24, 0xC8	; 200
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	08 95       	ret

0000188e <__tablejump2__>:
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	05 90       	lpm	r0, Z+
    1894:	f4 91       	lpm	r31, Z
    1896:	e0 2d       	mov	r30, r0
    1898:	09 94       	ijmp

0000189a <_exit>:
    189a:	f8 94       	cli

0000189c <__stop_program>:
    189c:	ff cf       	rjmp	.-2      	; 0x189c <__stop_program>
